/*
 * api.creativehub.io
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.33
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Apicreativehubio);
  }
}(this, function(expect, Apicreativehubio) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Apicreativehubio.OrdersApi();
  });

  describe('(package)', function() {
    describe('OrdersApi', function() {
      describe('ordersConfirmV1', function() {
        it('should call ordersConfirmV1 successfully', function(done) {
          // TODO: uncomment, update parameter values for ordersConfirmV1 call and complete the assertions
          /*
          var opts = {};
          opts.model = new Apicreativehubio.OrderConfirmedRequest();
          opts.model.orderId = 0;
          opts.model.deliveryOptionId = 0;
          opts.model.deliveryChargeExcludingSalesTax = ;
          opts.model.deliveryChargeSalesTax = ;
          opts.model.externalReference = "";

          instance.ordersConfirmV1(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Apicreativehubio.OrderConfirmedResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.externalReference).to.be.a('string');
            expect(data.externalReference).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.messageToLab).to.be.a('string');
            expect(data.messageToLab).to.be("");
            expect(data.shippingAddress).to.be.a(Apicreativehubio.Address);
                  expect(data.shippingAddress.firstName).to.be.a('string');
              expect(data.shippingAddress.firstName).to.be("");
              expect(data.shippingAddress.lastName).to.be.a('string');
              expect(data.shippingAddress.lastName).to.be("");
              expect(data.shippingAddress.line1).to.be.a('string');
              expect(data.shippingAddress.line1).to.be("");
              expect(data.shippingAddress.line2).to.be.a('string');
              expect(data.shippingAddress.line2).to.be("");
              expect(data.shippingAddress.town).to.be.a('string');
              expect(data.shippingAddress.town).to.be("");
              expect(data.shippingAddress.county).to.be.a('string');
              expect(data.shippingAddress.county).to.be("");
              expect(data.shippingAddress.postCode).to.be.a('string');
              expect(data.shippingAddress.postCode).to.be("");
              expect(data.shippingAddress.countryId).to.be.a('number');
              expect(data.shippingAddress.countryId).to.be(0);
              expect(data.shippingAddress.countryCode).to.be.a('string');
              expect(data.shippingAddress.countryCode).to.be("");
              expect(data.shippingAddress.countryName).to.be.a('string');
              expect(data.shippingAddress.countryName).to.be("");
              expect(data.shippingAddress.phoneNumber).to.be.a('string');
              expect(data.shippingAddress.phoneNumber).to.be("");
            {
              let dataCtr = data.orderItems;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Apicreativehubio.OrderItemResponse);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.productId).to.be.a('number');
                expect(data.productId).to.be(0);
                expect(data.printOptionId).to.be.a('number');
                expect(data.printOptionId).to.be(0);
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0);
                expect(data.externalReference).to.be.a('string');
                expect(data.externalReference).to.be("");
                expect(data.externalSku).to.be.a('string');
                expect(data.externalSku).to.be("");
                expect(data.product).to.be.a(Apicreativehubio.Product);
                      expect(data.product.id).to.be.a('number');
                  expect(data.product.id).to.be(0);
                  expect(data.product.fileName).to.be.a('string');
                  expect(data.product.fileName).to.be("");
                  expect(data.product.displayName).to.be.a('string');
                  expect(data.product.displayName).to.be("");
                  expect(data.product.description).to.be.a('string');
                  expect(data.product.description).to.be("");
                  expect(data.product.storagePrefix).to.be.a('string');
                  expect(data.product.storagePrefix).to.be("");
                  expect(data.product.GUID).to.be.a('string');
                  expect(data.product.GUID).to.be("");
                  expect(data.product.HDPI).to.be.a('number');
                  expect(data.product.HDPI).to.be(0.0);
                  expect(data.product.VDPI).to.be.a('number');
                  expect(data.product.VDPI).to.be(0.0);
                  expect(data.product.width).to.be.a('number');
                  expect(data.product.width).to.be(0);
                  expect(data.product.height).to.be.a('number');
                  expect(data.product.height).to.be(0);
                  expect(data.product.dateTaken).to.be.a(Date);
                  expect(data.product.dateTaken).to.be(new Date());
                  expect(data.product.userFirstName).to.be.a('string');
                  expect(data.product.userFirstName).to.be("");
                  expect(data.product.userLastName).to.be.a('string');
                  expect(data.product.userLastName).to.be("");
                  expect(data.product.userDefaultArtistName).to.be.a('string');
                  expect(data.product.userDefaultArtistName).to.be("");
                  expect(data.product.artistName).to.be.a('string');
                  expect(data.product.artistName).to.be("");
                  expect(data.product.paper).to.be.a('string');
                  expect(data.product.paper).to.be("");
                  expect(data.product.printType).to.be.a('string');
                  expect(data.product.printType).to.be("");
                  expect(data.product.hasFramedOptions).to.be.a('boolean');
                  expect(data.product.hasFramedOptions).to.be(false);
                  {
                    let dataCtr = data.product.printOptions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Apicreativehubio.PrintOption);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be(0);
                      expect(data.price).to.be.a('number');
                      expect(data.price).to.be();
                      expect(data.costPerItem).to.be.a('number');
                      expect(data.costPerItem).to.be();
                      expect(data.shortSideInches).to.be.a('number');
                      expect(data.shortSideInches).to.be();
                      expect(data.longSideInches).to.be.a('number');
                      expect(data.longSideInches).to.be();
                      expect(data.shortSideMM).to.be.a('number');
                      expect(data.shortSideMM).to.be();
                      expect(data.longSideMM).to.be.a('number');
                      expect(data.longSideMM).to.be();
                      expect(data.borderTopMM).to.be.a('number');
                      expect(data.borderTopMM).to.be();
                      expect(data.borderLeftMM).to.be.a('number');
                      expect(data.borderLeftMM).to.be();
                      expect(data.borderRightMM).to.be.a('number');
                      expect(data.borderRightMM).to.be();
                      expect(data.borderBottomMM).to.be.a('number');
                      expect(data.borderBottomMM).to.be();
                      expect(data.wMBorderTopMM).to.be.a('number');
                      expect(data.wMBorderTopMM).to.be();
                      expect(data.wMBorderLeftMM).to.be.a('number');
                      expect(data.wMBorderLeftMM).to.be();
                      expect(data.wMBorderRightMM).to.be.a('number');
                      expect(data.wMBorderRightMM).to.be();
                      expect(data.wMBorderBottomMM).to.be.a('number');
                      expect(data.wMBorderBottomMM).to.be();
                      expect(data.wMColour).to.be.a('string');
                      expect(data.wMColour).to.be("");
                      expect(data.isAvailable).to.be.a('boolean');
                      expect(data.isAvailable).to.be(false);
                      expect(data.sellAsEdition).to.be.a('boolean');
                      expect(data.sellAsEdition).to.be(false);
                      expect(data.editionsLimit).to.be.a('number');
                      expect(data.editionsLimit).to.be(0);
                      expect(data.lastUpdated).to.be.a(Date);
                      expect(data.lastUpdated).to.be(new Date());
                      expect(data.hasFrame).to.be.a('boolean');
                      expect(data.hasFrame).to.be(false);
                      expect(data.hasCanvas).to.be.a('boolean');
                      expect(data.hasCanvas).to.be(false);
                      expect(data.frameDescription).to.be.a('string');
                      expect(data.frameDescription).to.be("");
                      expect(data.frameWidthMM).to.be.a('number');
                      expect(data.frameWidthMM).to.be(0);
                      expect(data.widthMM).to.be.a('number');
                      expect(data.widthMM).to.be();
                      expect(data.heightMM).to.be.a('number');
                      expect(data.heightMM).to.be();
                      expect(data.editionsSold).to.be.a('number');
                      expect(data.editionsSold).to.be(0);
                      expect(data.currencyCode).to.be.a('string');
                      expect(data.currencyCode).to.be("");
                      expect(data.previewFileNameStandard).to.be.a('string');
                      expect(data.previewFileNameStandard).to.be("");
                      expect(data.previewFileNameCloseUp).to.be.a('string');
                      expect(data.previewFileNameCloseUp).to.be("");
                      expect(data.verticalBorderMM).to.be.a('number');
                      expect(data.verticalBorderMM).to.be();
                      expect(data.horizontalBorderMM).to.be.a('number');
                      expect(data.horizontalBorderMM).to.be();
                      expect(data.longBorderMM).to.be.a('number');
                      expect(data.longBorderMM).to.be();
                      expect(data.shortBorderMM).to.be.a('number');
                      expect(data.shortBorderMM).to.be();
                      expect(data.verticalWMBorderMM).to.be.a('number');
                      expect(data.verticalWMBorderMM).to.be();
                      expect(data.horizontalWMBorderMM).to.be.a('number');
                      expect(data.horizontalWMBorderMM).to.be();
                      expect(data.longMountMM).to.be.a('number');
                      expect(data.longMountMM).to.be();
                      expect(data.shortMountMM).to.be.a('number');
                      expect(data.shortMountMM).to.be();
                      expect(data.totalWidthMM).to.be.a('number');
                      expect(data.totalWidthMM).to.be();
                      expect(data.totalHeightMM).to.be.a('number');
                      expect(data.totalHeightMM).to.be();
                      expect(data.totalLongSideMM).to.be.a('number');
                      expect(data.totalLongSideMM).to.be();
                      expect(data.totalShortSideMM).to.be.a('number');
                      expect(data.totalShortSideMM).to.be();
                      expect(data.totalLongSideInches).to.be.a('number');
                      expect(data.totalLongSideInches).to.be();
                      expect(data.totalShortSideInches).to.be.a('number');
                      expect(data.totalShortSideInches).to.be();
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.shortDescription).to.be.a('string');
                      expect(data.shortDescription).to.be("");
                      expect(data.fullDescription).to.be.a('string');
                      expect(data.fullDescription).to.be("");
                      expect(data.variantDescription).to.be.a('string');
                      expect(data.variantDescription).to.be("");
                      expect(data.dimensions).to.be.a(Apicreativehubio.ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal);
                            expect(data.dimensions.item1).to.be.a('number');
                        expect(data.dimensions.item1).to.be();
                        expect(data.dimensions.item2).to.be.a('number');
                        expect(data.dimensions.item2).to.be();
                        expect(data.dimensions.item3).to.be.a('number');
                        expect(data.dimensions.item3).to.be();
                        expect(data.dimensions.item4).to.be.a('number');
                        expect(data.dimensions.item4).to.be();
      
                            }
                  }
                  expect(data.product.descriptionHTML).to.be.a('string');
                  expect(data.product.descriptionHTML).to.be("");
                  expect(data.product.dateTakenString).to.be.a('string');
                  expect(data.product.dateTakenString).to.be("");
                  expect(data.product.thumbnailUrl).to.be.a('string');
                  expect(data.product.thumbnailUrl).to.be("");
                expect(data.printOption).to.be.a(Apicreativehubio.PrintOption);
                      expect(data.printOption.id).to.be.a('number');
                  expect(data.printOption.id).to.be(0);
                  expect(data.printOption.price).to.be.a('number');
                  expect(data.printOption.price).to.be();
                  expect(data.printOption.costPerItem).to.be.a('number');
                  expect(data.printOption.costPerItem).to.be();
                  expect(data.printOption.shortSideInches).to.be.a('number');
                  expect(data.printOption.shortSideInches).to.be();
                  expect(data.printOption.longSideInches).to.be.a('number');
                  expect(data.printOption.longSideInches).to.be();
                  expect(data.printOption.shortSideMM).to.be.a('number');
                  expect(data.printOption.shortSideMM).to.be();
                  expect(data.printOption.longSideMM).to.be.a('number');
                  expect(data.printOption.longSideMM).to.be();
                  expect(data.printOption.borderTopMM).to.be.a('number');
                  expect(data.printOption.borderTopMM).to.be();
                  expect(data.printOption.borderLeftMM).to.be.a('number');
                  expect(data.printOption.borderLeftMM).to.be();
                  expect(data.printOption.borderRightMM).to.be.a('number');
                  expect(data.printOption.borderRightMM).to.be();
                  expect(data.printOption.borderBottomMM).to.be.a('number');
                  expect(data.printOption.borderBottomMM).to.be();
                  expect(data.printOption.wMBorderTopMM).to.be.a('number');
                  expect(data.printOption.wMBorderTopMM).to.be();
                  expect(data.printOption.wMBorderLeftMM).to.be.a('number');
                  expect(data.printOption.wMBorderLeftMM).to.be();
                  expect(data.printOption.wMBorderRightMM).to.be.a('number');
                  expect(data.printOption.wMBorderRightMM).to.be();
                  expect(data.printOption.wMBorderBottomMM).to.be.a('number');
                  expect(data.printOption.wMBorderBottomMM).to.be();
                  expect(data.printOption.wMColour).to.be.a('string');
                  expect(data.printOption.wMColour).to.be("");
                  expect(data.printOption.isAvailable).to.be.a('boolean');
                  expect(data.printOption.isAvailable).to.be(false);
                  expect(data.printOption.sellAsEdition).to.be.a('boolean');
                  expect(data.printOption.sellAsEdition).to.be(false);
                  expect(data.printOption.editionsLimit).to.be.a('number');
                  expect(data.printOption.editionsLimit).to.be(0);
                  expect(data.printOption.lastUpdated).to.be.a(Date);
                  expect(data.printOption.lastUpdated).to.be(new Date());
                  expect(data.printOption.hasFrame).to.be.a('boolean');
                  expect(data.printOption.hasFrame).to.be(false);
                  expect(data.printOption.hasCanvas).to.be.a('boolean');
                  expect(data.printOption.hasCanvas).to.be(false);
                  expect(data.printOption.frameDescription).to.be.a('string');
                  expect(data.printOption.frameDescription).to.be("");
                  expect(data.printOption.frameWidthMM).to.be.a('number');
                  expect(data.printOption.frameWidthMM).to.be(0);
                  expect(data.printOption.widthMM).to.be.a('number');
                  expect(data.printOption.widthMM).to.be();
                  expect(data.printOption.heightMM).to.be.a('number');
                  expect(data.printOption.heightMM).to.be();
                  expect(data.printOption.editionsSold).to.be.a('number');
                  expect(data.printOption.editionsSold).to.be(0);
                  expect(data.printOption.currencyCode).to.be.a('string');
                  expect(data.printOption.currencyCode).to.be("");
                  expect(data.printOption.previewFileNameStandard).to.be.a('string');
                  expect(data.printOption.previewFileNameStandard).to.be("");
                  expect(data.printOption.previewFileNameCloseUp).to.be.a('string');
                  expect(data.printOption.previewFileNameCloseUp).to.be("");
                  expect(data.printOption.verticalBorderMM).to.be.a('number');
                  expect(data.printOption.verticalBorderMM).to.be();
                  expect(data.printOption.horizontalBorderMM).to.be.a('number');
                  expect(data.printOption.horizontalBorderMM).to.be();
                  expect(data.printOption.longBorderMM).to.be.a('number');
                  expect(data.printOption.longBorderMM).to.be();
                  expect(data.printOption.shortBorderMM).to.be.a('number');
                  expect(data.printOption.shortBorderMM).to.be();
                  expect(data.printOption.verticalWMBorderMM).to.be.a('number');
                  expect(data.printOption.verticalWMBorderMM).to.be();
                  expect(data.printOption.horizontalWMBorderMM).to.be.a('number');
                  expect(data.printOption.horizontalWMBorderMM).to.be();
                  expect(data.printOption.longMountMM).to.be.a('number');
                  expect(data.printOption.longMountMM).to.be();
                  expect(data.printOption.shortMountMM).to.be.a('number');
                  expect(data.printOption.shortMountMM).to.be();
                  expect(data.printOption.totalWidthMM).to.be.a('number');
                  expect(data.printOption.totalWidthMM).to.be();
                  expect(data.printOption.totalHeightMM).to.be.a('number');
                  expect(data.printOption.totalHeightMM).to.be();
                  expect(data.printOption.totalLongSideMM).to.be.a('number');
                  expect(data.printOption.totalLongSideMM).to.be();
                  expect(data.printOption.totalShortSideMM).to.be.a('number');
                  expect(data.printOption.totalShortSideMM).to.be();
                  expect(data.printOption.totalLongSideInches).to.be.a('number');
                  expect(data.printOption.totalLongSideInches).to.be();
                  expect(data.printOption.totalShortSideInches).to.be.a('number');
                  expect(data.printOption.totalShortSideInches).to.be();
                  expect(data.printOption.description).to.be.a('string');
                  expect(data.printOption.description).to.be("");
                  expect(data.printOption.shortDescription).to.be.a('string');
                  expect(data.printOption.shortDescription).to.be("");
                  expect(data.printOption.fullDescription).to.be.a('string');
                  expect(data.printOption.fullDescription).to.be("");
                  expect(data.printOption.variantDescription).to.be.a('string');
                  expect(data.printOption.variantDescription).to.be("");
                  expect(data.printOption.dimensions).to.be.a(Apicreativehubio.ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal);
                        expect(data.printOption.dimensions.item1).to.be.a('number');
                    expect(data.printOption.dimensions.item1).to.be();
                    expect(data.printOption.dimensions.item2).to.be.a('number');
                    expect(data.printOption.dimensions.item2).to.be();
                    expect(data.printOption.dimensions.item3).to.be.a('number');
                    expect(data.printOption.dimensions.item3).to.be();
                    expect(data.printOption.dimensions.item4).to.be.a('number');
                    expect(data.printOption.dimensions.item4).to.be();

                      }
            }
            expect(data.orderState).to.be.a(Apicreativehubio.OrderState);
                expect(data.dateCreated).to.be.a(Date);
            expect(data.dateCreated).to.be(new Date());
            expect(data.dateLastEdited).to.be.a(Date);
            expect(data.dateLastEdited).to.be(new Date());
            expect(data.printCostExcludingSalesTax).to.be.a('number');
            expect(data.printCostExcludingSalesTax).to.be();
            expect(data.printCostSalesTax).to.be.a('number');
            expect(data.printCostSalesTax).to.be();
            expect(data.totalExcludingSalesTax).to.be.a('number');
            expect(data.totalExcludingSalesTax).to.be();
            expect(data.totalSalesTax).to.be.a('number');
            expect(data.totalSalesTax).to.be();
            expect(data.isPaid).to.be.a('boolean');
            expect(data.isPaid).to.be(false);
            expect(data.dateCreatedString).to.be.a('string');
            expect(data.dateCreatedString).to.be("");
            expect(data.dateLastEditedString).to.be.a('string');
            expect(data.dateLastEditedString).to.be("");
            expect(data.deliveryOption).to.be.a(Apicreativehubio.DeliveryOption);
                  expect(data.deliveryOption.id).to.be.a('number');
              expect(data.deliveryOption.id).to.be(0);
              expect(data.deliveryOption.branchId).to.be.a('number');
              expect(data.deliveryOption.branchId).to.be(0);
              expect(data.deliveryOption.branchName).to.be.a('string');
              expect(data.deliveryOption.branchName).to.be("");
              expect(data.deliveryOption.method).to.be.a('string');
              expect(data.deliveryOption.method).to.be("");
              expect(data.deliveryOption.deliveryTime).to.be.a('string');
              expect(data.deliveryOption.deliveryTime).to.be("");
              expect(data.deliveryOption.deliveryChargeExcludingSalesTax).to.be.a('number');
              expect(data.deliveryOption.deliveryChargeExcludingSalesTax).to.be();
              expect(data.deliveryOption.deliveryChargeSalesTax).to.be.a('number');
              expect(data.deliveryOption.deliveryChargeSalesTax).to.be();
              expect(data.deliveryOption.estimatedDeliveryDateFrom).to.be.a(Date);
              expect(data.deliveryOption.estimatedDeliveryDateFrom).to.be(new Date());
              expect(data.deliveryOption.estimatedDeliveryDateTo).to.be.a(Date);
              expect(data.deliveryOption.estimatedDeliveryDateTo).to.be(new Date());
            expect(data.deliveryChargeExcludingSalesTax).to.be.a('number');
            expect(data.deliveryChargeExcludingSalesTax).to.be();
            expect(data.deliveryChargeSalesTax).to.be.a('number');
            expect(data.deliveryChargeSalesTax).to.be();
            expect(data.dateDispatched).to.be.a(Date);
            expect(data.dateDispatched).to.be(new Date());
            expect(data.trackingNumber).to.be.a('string');
            expect(data.trackingNumber).to.be("");
            expect(data.dateDispatchedString).to.be.a('string');
            expect(data.dateDispatchedString).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ordersDeleteV1', function() {
        it('should call ordersDeleteV1 successfully', function(done) {
          // TODO: uncomment, update parameter values for ordersDeleteV1 call
          /*
          var id = 56;

          instance.ordersDeleteV1(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ordersEmbryonicV1', function() {
        it('should call ordersEmbryonicV1 successfully', function(done) {
          // TODO: uncomment, update parameter values for ordersEmbryonicV1 call and complete the assertions
          /*
          var opts = {};
          opts.model = new Apicreativehubio.OrderEmbryonicRequest();
          opts.model.id = 0;
          opts.model.externalReference = "";
          opts.model.firstName = "";
          opts.model.lastName = "";
          opts.model.email = "";
          opts.model.messageToLab = "";
          opts.model.shippingAddress = new Apicreativehubio.Address();
          opts.model.shippingAddress.firstName = "";
          opts.model.shippingAddress.lastName = "";
          opts.model.shippingAddress.line1 = "";
          opts.model.shippingAddress.line2 = "";
          opts.model.shippingAddress.town = "";
          opts.model.shippingAddress.county = "";
          opts.model.shippingAddress.postCode = "";
          opts.model.shippingAddress.countryId = 0;
          opts.model.shippingAddress.countryCode = "";
          opts.model.shippingAddress.countryName = "";
          opts.model.shippingAddress.phoneNumber = "";
          opts.model.orderItems = [new Apicreativehubio.OrderItemRequest()];
          opts.model.orderItems[0].id = 0;
          opts.model.orderItems[0].productId = 0;
          opts.model.orderItems[0].printOptionId = 0;
          opts.model.orderItems[0].quantity = 0;
          opts.model.orderItems[0].externalReference = "";
          opts.model.orderItems[0].externalSku = "";

          instance.ordersEmbryonicV1(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Apicreativehubio.OrderEmbryonicResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.externalReference).to.be.a('string');
            expect(data.externalReference).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.messageToLab).to.be.a('string');
            expect(data.messageToLab).to.be("");
            expect(data.shippingAddress).to.be.a(Apicreativehubio.Address);
                  expect(data.shippingAddress.firstName).to.be.a('string');
              expect(data.shippingAddress.firstName).to.be("");
              expect(data.shippingAddress.lastName).to.be.a('string');
              expect(data.shippingAddress.lastName).to.be("");
              expect(data.shippingAddress.line1).to.be.a('string');
              expect(data.shippingAddress.line1).to.be("");
              expect(data.shippingAddress.line2).to.be.a('string');
              expect(data.shippingAddress.line2).to.be("");
              expect(data.shippingAddress.town).to.be.a('string');
              expect(data.shippingAddress.town).to.be("");
              expect(data.shippingAddress.county).to.be.a('string');
              expect(data.shippingAddress.county).to.be("");
              expect(data.shippingAddress.postCode).to.be.a('string');
              expect(data.shippingAddress.postCode).to.be("");
              expect(data.shippingAddress.countryId).to.be.a('number');
              expect(data.shippingAddress.countryId).to.be(0);
              expect(data.shippingAddress.countryCode).to.be.a('string');
              expect(data.shippingAddress.countryCode).to.be("");
              expect(data.shippingAddress.countryName).to.be.a('string');
              expect(data.shippingAddress.countryName).to.be("");
              expect(data.shippingAddress.phoneNumber).to.be.a('string');
              expect(data.shippingAddress.phoneNumber).to.be("");
            {
              let dataCtr = data.orderItems;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Apicreativehubio.OrderItemResponse);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.productId).to.be.a('number');
                expect(data.productId).to.be(0);
                expect(data.printOptionId).to.be.a('number');
                expect(data.printOptionId).to.be(0);
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0);
                expect(data.externalReference).to.be.a('string');
                expect(data.externalReference).to.be("");
                expect(data.externalSku).to.be.a('string');
                expect(data.externalSku).to.be("");
                expect(data.product).to.be.a(Apicreativehubio.Product);
                      expect(data.product.id).to.be.a('number');
                  expect(data.product.id).to.be(0);
                  expect(data.product.fileName).to.be.a('string');
                  expect(data.product.fileName).to.be("");
                  expect(data.product.displayName).to.be.a('string');
                  expect(data.product.displayName).to.be("");
                  expect(data.product.description).to.be.a('string');
                  expect(data.product.description).to.be("");
                  expect(data.product.storagePrefix).to.be.a('string');
                  expect(data.product.storagePrefix).to.be("");
                  expect(data.product.GUID).to.be.a('string');
                  expect(data.product.GUID).to.be("");
                  expect(data.product.HDPI).to.be.a('number');
                  expect(data.product.HDPI).to.be(0.0);
                  expect(data.product.VDPI).to.be.a('number');
                  expect(data.product.VDPI).to.be(0.0);
                  expect(data.product.width).to.be.a('number');
                  expect(data.product.width).to.be(0);
                  expect(data.product.height).to.be.a('number');
                  expect(data.product.height).to.be(0);
                  expect(data.product.dateTaken).to.be.a(Date);
                  expect(data.product.dateTaken).to.be(new Date());
                  expect(data.product.userFirstName).to.be.a('string');
                  expect(data.product.userFirstName).to.be("");
                  expect(data.product.userLastName).to.be.a('string');
                  expect(data.product.userLastName).to.be("");
                  expect(data.product.userDefaultArtistName).to.be.a('string');
                  expect(data.product.userDefaultArtistName).to.be("");
                  expect(data.product.artistName).to.be.a('string');
                  expect(data.product.artistName).to.be("");
                  expect(data.product.paper).to.be.a('string');
                  expect(data.product.paper).to.be("");
                  expect(data.product.printType).to.be.a('string');
                  expect(data.product.printType).to.be("");
                  expect(data.product.hasFramedOptions).to.be.a('boolean');
                  expect(data.product.hasFramedOptions).to.be(false);
                  {
                    let dataCtr = data.product.printOptions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Apicreativehubio.PrintOption);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be(0);
                      expect(data.price).to.be.a('number');
                      expect(data.price).to.be();
                      expect(data.costPerItem).to.be.a('number');
                      expect(data.costPerItem).to.be();
                      expect(data.shortSideInches).to.be.a('number');
                      expect(data.shortSideInches).to.be();
                      expect(data.longSideInches).to.be.a('number');
                      expect(data.longSideInches).to.be();
                      expect(data.shortSideMM).to.be.a('number');
                      expect(data.shortSideMM).to.be();
                      expect(data.longSideMM).to.be.a('number');
                      expect(data.longSideMM).to.be();
                      expect(data.borderTopMM).to.be.a('number');
                      expect(data.borderTopMM).to.be();
                      expect(data.borderLeftMM).to.be.a('number');
                      expect(data.borderLeftMM).to.be();
                      expect(data.borderRightMM).to.be.a('number');
                      expect(data.borderRightMM).to.be();
                      expect(data.borderBottomMM).to.be.a('number');
                      expect(data.borderBottomMM).to.be();
                      expect(data.wMBorderTopMM).to.be.a('number');
                      expect(data.wMBorderTopMM).to.be();
                      expect(data.wMBorderLeftMM).to.be.a('number');
                      expect(data.wMBorderLeftMM).to.be();
                      expect(data.wMBorderRightMM).to.be.a('number');
                      expect(data.wMBorderRightMM).to.be();
                      expect(data.wMBorderBottomMM).to.be.a('number');
                      expect(data.wMBorderBottomMM).to.be();
                      expect(data.wMColour).to.be.a('string');
                      expect(data.wMColour).to.be("");
                      expect(data.isAvailable).to.be.a('boolean');
                      expect(data.isAvailable).to.be(false);
                      expect(data.sellAsEdition).to.be.a('boolean');
                      expect(data.sellAsEdition).to.be(false);
                      expect(data.editionsLimit).to.be.a('number');
                      expect(data.editionsLimit).to.be(0);
                      expect(data.lastUpdated).to.be.a(Date);
                      expect(data.lastUpdated).to.be(new Date());
                      expect(data.hasFrame).to.be.a('boolean');
                      expect(data.hasFrame).to.be(false);
                      expect(data.hasCanvas).to.be.a('boolean');
                      expect(data.hasCanvas).to.be(false);
                      expect(data.frameDescription).to.be.a('string');
                      expect(data.frameDescription).to.be("");
                      expect(data.frameWidthMM).to.be.a('number');
                      expect(data.frameWidthMM).to.be(0);
                      expect(data.widthMM).to.be.a('number');
                      expect(data.widthMM).to.be();
                      expect(data.heightMM).to.be.a('number');
                      expect(data.heightMM).to.be();
                      expect(data.editionsSold).to.be.a('number');
                      expect(data.editionsSold).to.be(0);
                      expect(data.currencyCode).to.be.a('string');
                      expect(data.currencyCode).to.be("");
                      expect(data.previewFileNameStandard).to.be.a('string');
                      expect(data.previewFileNameStandard).to.be("");
                      expect(data.previewFileNameCloseUp).to.be.a('string');
                      expect(data.previewFileNameCloseUp).to.be("");
                      expect(data.verticalBorderMM).to.be.a('number');
                      expect(data.verticalBorderMM).to.be();
                      expect(data.horizontalBorderMM).to.be.a('number');
                      expect(data.horizontalBorderMM).to.be();
                      expect(data.longBorderMM).to.be.a('number');
                      expect(data.longBorderMM).to.be();
                      expect(data.shortBorderMM).to.be.a('number');
                      expect(data.shortBorderMM).to.be();
                      expect(data.verticalWMBorderMM).to.be.a('number');
                      expect(data.verticalWMBorderMM).to.be();
                      expect(data.horizontalWMBorderMM).to.be.a('number');
                      expect(data.horizontalWMBorderMM).to.be();
                      expect(data.longMountMM).to.be.a('number');
                      expect(data.longMountMM).to.be();
                      expect(data.shortMountMM).to.be.a('number');
                      expect(data.shortMountMM).to.be();
                      expect(data.totalWidthMM).to.be.a('number');
                      expect(data.totalWidthMM).to.be();
                      expect(data.totalHeightMM).to.be.a('number');
                      expect(data.totalHeightMM).to.be();
                      expect(data.totalLongSideMM).to.be.a('number');
                      expect(data.totalLongSideMM).to.be();
                      expect(data.totalShortSideMM).to.be.a('number');
                      expect(data.totalShortSideMM).to.be();
                      expect(data.totalLongSideInches).to.be.a('number');
                      expect(data.totalLongSideInches).to.be();
                      expect(data.totalShortSideInches).to.be.a('number');
                      expect(data.totalShortSideInches).to.be();
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.shortDescription).to.be.a('string');
                      expect(data.shortDescription).to.be("");
                      expect(data.fullDescription).to.be.a('string');
                      expect(data.fullDescription).to.be("");
                      expect(data.variantDescription).to.be.a('string');
                      expect(data.variantDescription).to.be("");
                      expect(data.dimensions).to.be.a(Apicreativehubio.ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal);
                            expect(data.dimensions.item1).to.be.a('number');
                        expect(data.dimensions.item1).to.be();
                        expect(data.dimensions.item2).to.be.a('number');
                        expect(data.dimensions.item2).to.be();
                        expect(data.dimensions.item3).to.be.a('number');
                        expect(data.dimensions.item3).to.be();
                        expect(data.dimensions.item4).to.be.a('number');
                        expect(data.dimensions.item4).to.be();
      
                            }
                  }
                  expect(data.product.descriptionHTML).to.be.a('string');
                  expect(data.product.descriptionHTML).to.be("");
                  expect(data.product.dateTakenString).to.be.a('string');
                  expect(data.product.dateTakenString).to.be("");
                  expect(data.product.thumbnailUrl).to.be.a('string');
                  expect(data.product.thumbnailUrl).to.be("");
                expect(data.printOption).to.be.a(Apicreativehubio.PrintOption);
                      expect(data.printOption.id).to.be.a('number');
                  expect(data.printOption.id).to.be(0);
                  expect(data.printOption.price).to.be.a('number');
                  expect(data.printOption.price).to.be();
                  expect(data.printOption.costPerItem).to.be.a('number');
                  expect(data.printOption.costPerItem).to.be();
                  expect(data.printOption.shortSideInches).to.be.a('number');
                  expect(data.printOption.shortSideInches).to.be();
                  expect(data.printOption.longSideInches).to.be.a('number');
                  expect(data.printOption.longSideInches).to.be();
                  expect(data.printOption.shortSideMM).to.be.a('number');
                  expect(data.printOption.shortSideMM).to.be();
                  expect(data.printOption.longSideMM).to.be.a('number');
                  expect(data.printOption.longSideMM).to.be();
                  expect(data.printOption.borderTopMM).to.be.a('number');
                  expect(data.printOption.borderTopMM).to.be();
                  expect(data.printOption.borderLeftMM).to.be.a('number');
                  expect(data.printOption.borderLeftMM).to.be();
                  expect(data.printOption.borderRightMM).to.be.a('number');
                  expect(data.printOption.borderRightMM).to.be();
                  expect(data.printOption.borderBottomMM).to.be.a('number');
                  expect(data.printOption.borderBottomMM).to.be();
                  expect(data.printOption.wMBorderTopMM).to.be.a('number');
                  expect(data.printOption.wMBorderTopMM).to.be();
                  expect(data.printOption.wMBorderLeftMM).to.be.a('number');
                  expect(data.printOption.wMBorderLeftMM).to.be();
                  expect(data.printOption.wMBorderRightMM).to.be.a('number');
                  expect(data.printOption.wMBorderRightMM).to.be();
                  expect(data.printOption.wMBorderBottomMM).to.be.a('number');
                  expect(data.printOption.wMBorderBottomMM).to.be();
                  expect(data.printOption.wMColour).to.be.a('string');
                  expect(data.printOption.wMColour).to.be("");
                  expect(data.printOption.isAvailable).to.be.a('boolean');
                  expect(data.printOption.isAvailable).to.be(false);
                  expect(data.printOption.sellAsEdition).to.be.a('boolean');
                  expect(data.printOption.sellAsEdition).to.be(false);
                  expect(data.printOption.editionsLimit).to.be.a('number');
                  expect(data.printOption.editionsLimit).to.be(0);
                  expect(data.printOption.lastUpdated).to.be.a(Date);
                  expect(data.printOption.lastUpdated).to.be(new Date());
                  expect(data.printOption.hasFrame).to.be.a('boolean');
                  expect(data.printOption.hasFrame).to.be(false);
                  expect(data.printOption.hasCanvas).to.be.a('boolean');
                  expect(data.printOption.hasCanvas).to.be(false);
                  expect(data.printOption.frameDescription).to.be.a('string');
                  expect(data.printOption.frameDescription).to.be("");
                  expect(data.printOption.frameWidthMM).to.be.a('number');
                  expect(data.printOption.frameWidthMM).to.be(0);
                  expect(data.printOption.widthMM).to.be.a('number');
                  expect(data.printOption.widthMM).to.be();
                  expect(data.printOption.heightMM).to.be.a('number');
                  expect(data.printOption.heightMM).to.be();
                  expect(data.printOption.editionsSold).to.be.a('number');
                  expect(data.printOption.editionsSold).to.be(0);
                  expect(data.printOption.currencyCode).to.be.a('string');
                  expect(data.printOption.currencyCode).to.be("");
                  expect(data.printOption.previewFileNameStandard).to.be.a('string');
                  expect(data.printOption.previewFileNameStandard).to.be("");
                  expect(data.printOption.previewFileNameCloseUp).to.be.a('string');
                  expect(data.printOption.previewFileNameCloseUp).to.be("");
                  expect(data.printOption.verticalBorderMM).to.be.a('number');
                  expect(data.printOption.verticalBorderMM).to.be();
                  expect(data.printOption.horizontalBorderMM).to.be.a('number');
                  expect(data.printOption.horizontalBorderMM).to.be();
                  expect(data.printOption.longBorderMM).to.be.a('number');
                  expect(data.printOption.longBorderMM).to.be();
                  expect(data.printOption.shortBorderMM).to.be.a('number');
                  expect(data.printOption.shortBorderMM).to.be();
                  expect(data.printOption.verticalWMBorderMM).to.be.a('number');
                  expect(data.printOption.verticalWMBorderMM).to.be();
                  expect(data.printOption.horizontalWMBorderMM).to.be.a('number');
                  expect(data.printOption.horizontalWMBorderMM).to.be();
                  expect(data.printOption.longMountMM).to.be.a('number');
                  expect(data.printOption.longMountMM).to.be();
                  expect(data.printOption.shortMountMM).to.be.a('number');
                  expect(data.printOption.shortMountMM).to.be();
                  expect(data.printOption.totalWidthMM).to.be.a('number');
                  expect(data.printOption.totalWidthMM).to.be();
                  expect(data.printOption.totalHeightMM).to.be.a('number');
                  expect(data.printOption.totalHeightMM).to.be();
                  expect(data.printOption.totalLongSideMM).to.be.a('number');
                  expect(data.printOption.totalLongSideMM).to.be();
                  expect(data.printOption.totalShortSideMM).to.be.a('number');
                  expect(data.printOption.totalShortSideMM).to.be();
                  expect(data.printOption.totalLongSideInches).to.be.a('number');
                  expect(data.printOption.totalLongSideInches).to.be();
                  expect(data.printOption.totalShortSideInches).to.be.a('number');
                  expect(data.printOption.totalShortSideInches).to.be();
                  expect(data.printOption.description).to.be.a('string');
                  expect(data.printOption.description).to.be("");
                  expect(data.printOption.shortDescription).to.be.a('string');
                  expect(data.printOption.shortDescription).to.be("");
                  expect(data.printOption.fullDescription).to.be.a('string');
                  expect(data.printOption.fullDescription).to.be("");
                  expect(data.printOption.variantDescription).to.be.a('string');
                  expect(data.printOption.variantDescription).to.be("");
                  expect(data.printOption.dimensions).to.be.a(Apicreativehubio.ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal);
                        expect(data.printOption.dimensions.item1).to.be.a('number');
                    expect(data.printOption.dimensions.item1).to.be();
                    expect(data.printOption.dimensions.item2).to.be.a('number');
                    expect(data.printOption.dimensions.item2).to.be();
                    expect(data.printOption.dimensions.item3).to.be.a('number');
                    expect(data.printOption.dimensions.item3).to.be();
                    expect(data.printOption.dimensions.item4).to.be.a('number');
                    expect(data.printOption.dimensions.item4).to.be();

                      }
            }
            expect(data.orderState).to.be.a(Apicreativehubio.OrderState);
                expect(data.dateCreated).to.be.a(Date);
            expect(data.dateCreated).to.be(new Date());
            expect(data.dateLastEdited).to.be.a(Date);
            expect(data.dateLastEdited).to.be(new Date());
            expect(data.printCostExcludingSalesTax).to.be.a('number');
            expect(data.printCostExcludingSalesTax).to.be();
            expect(data.printCostSalesTax).to.be.a('number');
            expect(data.printCostSalesTax).to.be();
            expect(data.totalExcludingSalesTax).to.be.a('number');
            expect(data.totalExcludingSalesTax).to.be();
            expect(data.totalSalesTax).to.be.a('number');
            expect(data.totalSalesTax).to.be();
            expect(data.isPaid).to.be.a('boolean');
            expect(data.isPaid).to.be(false);
            expect(data.dateCreatedString).to.be.a('string');
            expect(data.dateCreatedString).to.be("");
            expect(data.dateLastEditedString).to.be.a('string');
            expect(data.dateLastEditedString).to.be("");
            {
              let dataCtr = data.deliveryOptions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Apicreativehubio.DeliveryOption);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.branchId).to.be.a('number');
                expect(data.branchId).to.be(0);
                expect(data.branchName).to.be.a('string');
                expect(data.branchName).to.be("");
                expect(data.method).to.be.a('string');
                expect(data.method).to.be("");
                expect(data.deliveryTime).to.be.a('string');
                expect(data.deliveryTime).to.be("");
                expect(data.deliveryChargeExcludingSalesTax).to.be.a('number');
                expect(data.deliveryChargeExcludingSalesTax).to.be();
                expect(data.deliveryChargeSalesTax).to.be.a('number');
                expect(data.deliveryChargeSalesTax).to.be();
                expect(data.estimatedDeliveryDateFrom).to.be.a(Date);
                expect(data.estimatedDeliveryDateFrom).to.be(new Date());
                expect(data.estimatedDeliveryDateTo).to.be.a(Date);
                expect(data.estimatedDeliveryDateTo).to.be(new Date());

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ordersGetV1', function() {
        it('should call ordersGetV1 successfully', function(done) {
          // TODO: uncomment, update parameter values for ordersGetV1 call and complete the assertions
          /*
          var id = 56;

          instance.ordersGetV1(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Apicreativehubio.OrderConfirmedResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.externalReference).to.be.a('string');
            expect(data.externalReference).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.messageToLab).to.be.a('string');
            expect(data.messageToLab).to.be("");
            expect(data.shippingAddress).to.be.a(Apicreativehubio.Address);
                  expect(data.shippingAddress.firstName).to.be.a('string');
              expect(data.shippingAddress.firstName).to.be("");
              expect(data.shippingAddress.lastName).to.be.a('string');
              expect(data.shippingAddress.lastName).to.be("");
              expect(data.shippingAddress.line1).to.be.a('string');
              expect(data.shippingAddress.line1).to.be("");
              expect(data.shippingAddress.line2).to.be.a('string');
              expect(data.shippingAddress.line2).to.be("");
              expect(data.shippingAddress.town).to.be.a('string');
              expect(data.shippingAddress.town).to.be("");
              expect(data.shippingAddress.county).to.be.a('string');
              expect(data.shippingAddress.county).to.be("");
              expect(data.shippingAddress.postCode).to.be.a('string');
              expect(data.shippingAddress.postCode).to.be("");
              expect(data.shippingAddress.countryId).to.be.a('number');
              expect(data.shippingAddress.countryId).to.be(0);
              expect(data.shippingAddress.countryCode).to.be.a('string');
              expect(data.shippingAddress.countryCode).to.be("");
              expect(data.shippingAddress.countryName).to.be.a('string');
              expect(data.shippingAddress.countryName).to.be("");
              expect(data.shippingAddress.phoneNumber).to.be.a('string');
              expect(data.shippingAddress.phoneNumber).to.be("");
            {
              let dataCtr = data.orderItems;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Apicreativehubio.OrderItemResponse);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.productId).to.be.a('number');
                expect(data.productId).to.be(0);
                expect(data.printOptionId).to.be.a('number');
                expect(data.printOptionId).to.be(0);
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0);
                expect(data.externalReference).to.be.a('string');
                expect(data.externalReference).to.be("");
                expect(data.externalSku).to.be.a('string');
                expect(data.externalSku).to.be("");
                expect(data.product).to.be.a(Apicreativehubio.Product);
                      expect(data.product.id).to.be.a('number');
                  expect(data.product.id).to.be(0);
                  expect(data.product.fileName).to.be.a('string');
                  expect(data.product.fileName).to.be("");
                  expect(data.product.displayName).to.be.a('string');
                  expect(data.product.displayName).to.be("");
                  expect(data.product.description).to.be.a('string');
                  expect(data.product.description).to.be("");
                  expect(data.product.storagePrefix).to.be.a('string');
                  expect(data.product.storagePrefix).to.be("");
                  expect(data.product.GUID).to.be.a('string');
                  expect(data.product.GUID).to.be("");
                  expect(data.product.HDPI).to.be.a('number');
                  expect(data.product.HDPI).to.be(0.0);
                  expect(data.product.VDPI).to.be.a('number');
                  expect(data.product.VDPI).to.be(0.0);
                  expect(data.product.width).to.be.a('number');
                  expect(data.product.width).to.be(0);
                  expect(data.product.height).to.be.a('number');
                  expect(data.product.height).to.be(0);
                  expect(data.product.dateTaken).to.be.a(Date);
                  expect(data.product.dateTaken).to.be(new Date());
                  expect(data.product.userFirstName).to.be.a('string');
                  expect(data.product.userFirstName).to.be("");
                  expect(data.product.userLastName).to.be.a('string');
                  expect(data.product.userLastName).to.be("");
                  expect(data.product.userDefaultArtistName).to.be.a('string');
                  expect(data.product.userDefaultArtistName).to.be("");
                  expect(data.product.artistName).to.be.a('string');
                  expect(data.product.artistName).to.be("");
                  expect(data.product.paper).to.be.a('string');
                  expect(data.product.paper).to.be("");
                  expect(data.product.printType).to.be.a('string');
                  expect(data.product.printType).to.be("");
                  expect(data.product.hasFramedOptions).to.be.a('boolean');
                  expect(data.product.hasFramedOptions).to.be(false);
                  {
                    let dataCtr = data.product.printOptions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Apicreativehubio.PrintOption);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be(0);
                      expect(data.price).to.be.a('number');
                      expect(data.price).to.be();
                      expect(data.costPerItem).to.be.a('number');
                      expect(data.costPerItem).to.be();
                      expect(data.shortSideInches).to.be.a('number');
                      expect(data.shortSideInches).to.be();
                      expect(data.longSideInches).to.be.a('number');
                      expect(data.longSideInches).to.be();
                      expect(data.shortSideMM).to.be.a('number');
                      expect(data.shortSideMM).to.be();
                      expect(data.longSideMM).to.be.a('number');
                      expect(data.longSideMM).to.be();
                      expect(data.borderTopMM).to.be.a('number');
                      expect(data.borderTopMM).to.be();
                      expect(data.borderLeftMM).to.be.a('number');
                      expect(data.borderLeftMM).to.be();
                      expect(data.borderRightMM).to.be.a('number');
                      expect(data.borderRightMM).to.be();
                      expect(data.borderBottomMM).to.be.a('number');
                      expect(data.borderBottomMM).to.be();
                      expect(data.wMBorderTopMM).to.be.a('number');
                      expect(data.wMBorderTopMM).to.be();
                      expect(data.wMBorderLeftMM).to.be.a('number');
                      expect(data.wMBorderLeftMM).to.be();
                      expect(data.wMBorderRightMM).to.be.a('number');
                      expect(data.wMBorderRightMM).to.be();
                      expect(data.wMBorderBottomMM).to.be.a('number');
                      expect(data.wMBorderBottomMM).to.be();
                      expect(data.wMColour).to.be.a('string');
                      expect(data.wMColour).to.be("");
                      expect(data.isAvailable).to.be.a('boolean');
                      expect(data.isAvailable).to.be(false);
                      expect(data.sellAsEdition).to.be.a('boolean');
                      expect(data.sellAsEdition).to.be(false);
                      expect(data.editionsLimit).to.be.a('number');
                      expect(data.editionsLimit).to.be(0);
                      expect(data.lastUpdated).to.be.a(Date);
                      expect(data.lastUpdated).to.be(new Date());
                      expect(data.hasFrame).to.be.a('boolean');
                      expect(data.hasFrame).to.be(false);
                      expect(data.hasCanvas).to.be.a('boolean');
                      expect(data.hasCanvas).to.be(false);
                      expect(data.frameDescription).to.be.a('string');
                      expect(data.frameDescription).to.be("");
                      expect(data.frameWidthMM).to.be.a('number');
                      expect(data.frameWidthMM).to.be(0);
                      expect(data.widthMM).to.be.a('number');
                      expect(data.widthMM).to.be();
                      expect(data.heightMM).to.be.a('number');
                      expect(data.heightMM).to.be();
                      expect(data.editionsSold).to.be.a('number');
                      expect(data.editionsSold).to.be(0);
                      expect(data.currencyCode).to.be.a('string');
                      expect(data.currencyCode).to.be("");
                      expect(data.previewFileNameStandard).to.be.a('string');
                      expect(data.previewFileNameStandard).to.be("");
                      expect(data.previewFileNameCloseUp).to.be.a('string');
                      expect(data.previewFileNameCloseUp).to.be("");
                      expect(data.verticalBorderMM).to.be.a('number');
                      expect(data.verticalBorderMM).to.be();
                      expect(data.horizontalBorderMM).to.be.a('number');
                      expect(data.horizontalBorderMM).to.be();
                      expect(data.longBorderMM).to.be.a('number');
                      expect(data.longBorderMM).to.be();
                      expect(data.shortBorderMM).to.be.a('number');
                      expect(data.shortBorderMM).to.be();
                      expect(data.verticalWMBorderMM).to.be.a('number');
                      expect(data.verticalWMBorderMM).to.be();
                      expect(data.horizontalWMBorderMM).to.be.a('number');
                      expect(data.horizontalWMBorderMM).to.be();
                      expect(data.longMountMM).to.be.a('number');
                      expect(data.longMountMM).to.be();
                      expect(data.shortMountMM).to.be.a('number');
                      expect(data.shortMountMM).to.be();
                      expect(data.totalWidthMM).to.be.a('number');
                      expect(data.totalWidthMM).to.be();
                      expect(data.totalHeightMM).to.be.a('number');
                      expect(data.totalHeightMM).to.be();
                      expect(data.totalLongSideMM).to.be.a('number');
                      expect(data.totalLongSideMM).to.be();
                      expect(data.totalShortSideMM).to.be.a('number');
                      expect(data.totalShortSideMM).to.be();
                      expect(data.totalLongSideInches).to.be.a('number');
                      expect(data.totalLongSideInches).to.be();
                      expect(data.totalShortSideInches).to.be.a('number');
                      expect(data.totalShortSideInches).to.be();
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.shortDescription).to.be.a('string');
                      expect(data.shortDescription).to.be("");
                      expect(data.fullDescription).to.be.a('string');
                      expect(data.fullDescription).to.be("");
                      expect(data.variantDescription).to.be.a('string');
                      expect(data.variantDescription).to.be("");
                      expect(data.dimensions).to.be.a(Apicreativehubio.ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal);
                            expect(data.dimensions.item1).to.be.a('number');
                        expect(data.dimensions.item1).to.be();
                        expect(data.dimensions.item2).to.be.a('number');
                        expect(data.dimensions.item2).to.be();
                        expect(data.dimensions.item3).to.be.a('number');
                        expect(data.dimensions.item3).to.be();
                        expect(data.dimensions.item4).to.be.a('number');
                        expect(data.dimensions.item4).to.be();
      
                            }
                  }
                  expect(data.product.descriptionHTML).to.be.a('string');
                  expect(data.product.descriptionHTML).to.be("");
                  expect(data.product.dateTakenString).to.be.a('string');
                  expect(data.product.dateTakenString).to.be("");
                  expect(data.product.thumbnailUrl).to.be.a('string');
                  expect(data.product.thumbnailUrl).to.be("");
                expect(data.printOption).to.be.a(Apicreativehubio.PrintOption);
                      expect(data.printOption.id).to.be.a('number');
                  expect(data.printOption.id).to.be(0);
                  expect(data.printOption.price).to.be.a('number');
                  expect(data.printOption.price).to.be();
                  expect(data.printOption.costPerItem).to.be.a('number');
                  expect(data.printOption.costPerItem).to.be();
                  expect(data.printOption.shortSideInches).to.be.a('number');
                  expect(data.printOption.shortSideInches).to.be();
                  expect(data.printOption.longSideInches).to.be.a('number');
                  expect(data.printOption.longSideInches).to.be();
                  expect(data.printOption.shortSideMM).to.be.a('number');
                  expect(data.printOption.shortSideMM).to.be();
                  expect(data.printOption.longSideMM).to.be.a('number');
                  expect(data.printOption.longSideMM).to.be();
                  expect(data.printOption.borderTopMM).to.be.a('number');
                  expect(data.printOption.borderTopMM).to.be();
                  expect(data.printOption.borderLeftMM).to.be.a('number');
                  expect(data.printOption.borderLeftMM).to.be();
                  expect(data.printOption.borderRightMM).to.be.a('number');
                  expect(data.printOption.borderRightMM).to.be();
                  expect(data.printOption.borderBottomMM).to.be.a('number');
                  expect(data.printOption.borderBottomMM).to.be();
                  expect(data.printOption.wMBorderTopMM).to.be.a('number');
                  expect(data.printOption.wMBorderTopMM).to.be();
                  expect(data.printOption.wMBorderLeftMM).to.be.a('number');
                  expect(data.printOption.wMBorderLeftMM).to.be();
                  expect(data.printOption.wMBorderRightMM).to.be.a('number');
                  expect(data.printOption.wMBorderRightMM).to.be();
                  expect(data.printOption.wMBorderBottomMM).to.be.a('number');
                  expect(data.printOption.wMBorderBottomMM).to.be();
                  expect(data.printOption.wMColour).to.be.a('string');
                  expect(data.printOption.wMColour).to.be("");
                  expect(data.printOption.isAvailable).to.be.a('boolean');
                  expect(data.printOption.isAvailable).to.be(false);
                  expect(data.printOption.sellAsEdition).to.be.a('boolean');
                  expect(data.printOption.sellAsEdition).to.be(false);
                  expect(data.printOption.editionsLimit).to.be.a('number');
                  expect(data.printOption.editionsLimit).to.be(0);
                  expect(data.printOption.lastUpdated).to.be.a(Date);
                  expect(data.printOption.lastUpdated).to.be(new Date());
                  expect(data.printOption.hasFrame).to.be.a('boolean');
                  expect(data.printOption.hasFrame).to.be(false);
                  expect(data.printOption.hasCanvas).to.be.a('boolean');
                  expect(data.printOption.hasCanvas).to.be(false);
                  expect(data.printOption.frameDescription).to.be.a('string');
                  expect(data.printOption.frameDescription).to.be("");
                  expect(data.printOption.frameWidthMM).to.be.a('number');
                  expect(data.printOption.frameWidthMM).to.be(0);
                  expect(data.printOption.widthMM).to.be.a('number');
                  expect(data.printOption.widthMM).to.be();
                  expect(data.printOption.heightMM).to.be.a('number');
                  expect(data.printOption.heightMM).to.be();
                  expect(data.printOption.editionsSold).to.be.a('number');
                  expect(data.printOption.editionsSold).to.be(0);
                  expect(data.printOption.currencyCode).to.be.a('string');
                  expect(data.printOption.currencyCode).to.be("");
                  expect(data.printOption.previewFileNameStandard).to.be.a('string');
                  expect(data.printOption.previewFileNameStandard).to.be("");
                  expect(data.printOption.previewFileNameCloseUp).to.be.a('string');
                  expect(data.printOption.previewFileNameCloseUp).to.be("");
                  expect(data.printOption.verticalBorderMM).to.be.a('number');
                  expect(data.printOption.verticalBorderMM).to.be();
                  expect(data.printOption.horizontalBorderMM).to.be.a('number');
                  expect(data.printOption.horizontalBorderMM).to.be();
                  expect(data.printOption.longBorderMM).to.be.a('number');
                  expect(data.printOption.longBorderMM).to.be();
                  expect(data.printOption.shortBorderMM).to.be.a('number');
                  expect(data.printOption.shortBorderMM).to.be();
                  expect(data.printOption.verticalWMBorderMM).to.be.a('number');
                  expect(data.printOption.verticalWMBorderMM).to.be();
                  expect(data.printOption.horizontalWMBorderMM).to.be.a('number');
                  expect(data.printOption.horizontalWMBorderMM).to.be();
                  expect(data.printOption.longMountMM).to.be.a('number');
                  expect(data.printOption.longMountMM).to.be();
                  expect(data.printOption.shortMountMM).to.be.a('number');
                  expect(data.printOption.shortMountMM).to.be();
                  expect(data.printOption.totalWidthMM).to.be.a('number');
                  expect(data.printOption.totalWidthMM).to.be();
                  expect(data.printOption.totalHeightMM).to.be.a('number');
                  expect(data.printOption.totalHeightMM).to.be();
                  expect(data.printOption.totalLongSideMM).to.be.a('number');
                  expect(data.printOption.totalLongSideMM).to.be();
                  expect(data.printOption.totalShortSideMM).to.be.a('number');
                  expect(data.printOption.totalShortSideMM).to.be();
                  expect(data.printOption.totalLongSideInches).to.be.a('number');
                  expect(data.printOption.totalLongSideInches).to.be();
                  expect(data.printOption.totalShortSideInches).to.be.a('number');
                  expect(data.printOption.totalShortSideInches).to.be();
                  expect(data.printOption.description).to.be.a('string');
                  expect(data.printOption.description).to.be("");
                  expect(data.printOption.shortDescription).to.be.a('string');
                  expect(data.printOption.shortDescription).to.be("");
                  expect(data.printOption.fullDescription).to.be.a('string');
                  expect(data.printOption.fullDescription).to.be("");
                  expect(data.printOption.variantDescription).to.be.a('string');
                  expect(data.printOption.variantDescription).to.be("");
                  expect(data.printOption.dimensions).to.be.a(Apicreativehubio.ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal);
                        expect(data.printOption.dimensions.item1).to.be.a('number');
                    expect(data.printOption.dimensions.item1).to.be();
                    expect(data.printOption.dimensions.item2).to.be.a('number');
                    expect(data.printOption.dimensions.item2).to.be();
                    expect(data.printOption.dimensions.item3).to.be.a('number');
                    expect(data.printOption.dimensions.item3).to.be();
                    expect(data.printOption.dimensions.item4).to.be.a('number');
                    expect(data.printOption.dimensions.item4).to.be();

                      }
            }
            expect(data.orderState).to.be.a(Apicreativehubio.OrderState);
                expect(data.dateCreated).to.be.a(Date);
            expect(data.dateCreated).to.be(new Date());
            expect(data.dateLastEdited).to.be.a(Date);
            expect(data.dateLastEdited).to.be(new Date());
            expect(data.printCostExcludingSalesTax).to.be.a('number');
            expect(data.printCostExcludingSalesTax).to.be();
            expect(data.printCostSalesTax).to.be.a('number');
            expect(data.printCostSalesTax).to.be();
            expect(data.totalExcludingSalesTax).to.be.a('number');
            expect(data.totalExcludingSalesTax).to.be();
            expect(data.totalSalesTax).to.be.a('number');
            expect(data.totalSalesTax).to.be();
            expect(data.isPaid).to.be.a('boolean');
            expect(data.isPaid).to.be(false);
            expect(data.dateCreatedString).to.be.a('string');
            expect(data.dateCreatedString).to.be("");
            expect(data.dateLastEditedString).to.be.a('string');
            expect(data.dateLastEditedString).to.be("");
            expect(data.deliveryOption).to.be.a(Apicreativehubio.DeliveryOption);
                  expect(data.deliveryOption.id).to.be.a('number');
              expect(data.deliveryOption.id).to.be(0);
              expect(data.deliveryOption.branchId).to.be.a('number');
              expect(data.deliveryOption.branchId).to.be(0);
              expect(data.deliveryOption.branchName).to.be.a('string');
              expect(data.deliveryOption.branchName).to.be("");
              expect(data.deliveryOption.method).to.be.a('string');
              expect(data.deliveryOption.method).to.be("");
              expect(data.deliveryOption.deliveryTime).to.be.a('string');
              expect(data.deliveryOption.deliveryTime).to.be("");
              expect(data.deliveryOption.deliveryChargeExcludingSalesTax).to.be.a('number');
              expect(data.deliveryOption.deliveryChargeExcludingSalesTax).to.be();
              expect(data.deliveryOption.deliveryChargeSalesTax).to.be.a('number');
              expect(data.deliveryOption.deliveryChargeSalesTax).to.be();
              expect(data.deliveryOption.estimatedDeliveryDateFrom).to.be.a(Date);
              expect(data.deliveryOption.estimatedDeliveryDateFrom).to.be(new Date());
              expect(data.deliveryOption.estimatedDeliveryDateTo).to.be.a(Date);
              expect(data.deliveryOption.estimatedDeliveryDateTo).to.be(new Date());
            expect(data.deliveryChargeExcludingSalesTax).to.be.a('number');
            expect(data.deliveryChargeExcludingSalesTax).to.be();
            expect(data.deliveryChargeSalesTax).to.be.a('number');
            expect(data.deliveryChargeSalesTax).to.be();
            expect(data.dateDispatched).to.be.a(Date);
            expect(data.dateDispatched).to.be(new Date());
            expect(data.trackingNumber).to.be.a('string');
            expect(data.trackingNumber).to.be("");
            expect(data.dateDispatchedString).to.be.a('string');
            expect(data.dateDispatchedString).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ordersQueryV1', function() {
        it('should call ordersQueryV1 successfully', function(done) {
          // TODO: uncomment, update parameter values for ordersQueryV1 call and complete the assertions
          /*
          var opts = {};
          opts.request = new Apicreativehubio.CollectionRequest();
          opts.request.page = 0;
          opts.request.pageSize = 0;
          opts.request.filter = new Apicreativehubio.IFilterDescriptor();
          opts.request.sorts = [new Apicreativehubio.SortDescriptor()];
          opts.request.sorts[0].member = "";
          opts.request.sorts[0].sortDirection = new Apicreativehubio.SortDirection();

          instance.ordersQueryV1(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Apicreativehubio.CollectionResultOfOrderConfirmedResponse);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Apicreativehubio.OrderConfirmedResponse);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.externalReference).to.be.a('string');
                expect(data.externalReference).to.be("");
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("");
                expect(data.messageToLab).to.be.a('string');
                expect(data.messageToLab).to.be("");
                expect(data.shippingAddress).to.be.a(Apicreativehubio.Address);
                      expect(data.shippingAddress.firstName).to.be.a('string');
                  expect(data.shippingAddress.firstName).to.be("");
                  expect(data.shippingAddress.lastName).to.be.a('string');
                  expect(data.shippingAddress.lastName).to.be("");
                  expect(data.shippingAddress.line1).to.be.a('string');
                  expect(data.shippingAddress.line1).to.be("");
                  expect(data.shippingAddress.line2).to.be.a('string');
                  expect(data.shippingAddress.line2).to.be("");
                  expect(data.shippingAddress.town).to.be.a('string');
                  expect(data.shippingAddress.town).to.be("");
                  expect(data.shippingAddress.county).to.be.a('string');
                  expect(data.shippingAddress.county).to.be("");
                  expect(data.shippingAddress.postCode).to.be.a('string');
                  expect(data.shippingAddress.postCode).to.be("");
                  expect(data.shippingAddress.countryId).to.be.a('number');
                  expect(data.shippingAddress.countryId).to.be(0);
                  expect(data.shippingAddress.countryCode).to.be.a('string');
                  expect(data.shippingAddress.countryCode).to.be("");
                  expect(data.shippingAddress.countryName).to.be.a('string');
                  expect(data.shippingAddress.countryName).to.be("");
                  expect(data.shippingAddress.phoneNumber).to.be.a('string');
                  expect(data.shippingAddress.phoneNumber).to.be("");
                {
                  let dataCtr = data.orderItems;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Apicreativehubio.OrderItemResponse);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.productId).to.be.a('number');
                    expect(data.productId).to.be(0);
                    expect(data.printOptionId).to.be.a('number');
                    expect(data.printOptionId).to.be(0);
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0);
                    expect(data.externalReference).to.be.a('string');
                    expect(data.externalReference).to.be("");
                    expect(data.externalSku).to.be.a('string');
                    expect(data.externalSku).to.be("");
                    expect(data.product).to.be.a(Apicreativehubio.Product);
                          expect(data.product.id).to.be.a('number');
                      expect(data.product.id).to.be(0);
                      expect(data.product.fileName).to.be.a('string');
                      expect(data.product.fileName).to.be("");
                      expect(data.product.displayName).to.be.a('string');
                      expect(data.product.displayName).to.be("");
                      expect(data.product.description).to.be.a('string');
                      expect(data.product.description).to.be("");
                      expect(data.product.storagePrefix).to.be.a('string');
                      expect(data.product.storagePrefix).to.be("");
                      expect(data.product.GUID).to.be.a('string');
                      expect(data.product.GUID).to.be("");
                      expect(data.product.HDPI).to.be.a('number');
                      expect(data.product.HDPI).to.be(0.0);
                      expect(data.product.VDPI).to.be.a('number');
                      expect(data.product.VDPI).to.be(0.0);
                      expect(data.product.width).to.be.a('number');
                      expect(data.product.width).to.be(0);
                      expect(data.product.height).to.be.a('number');
                      expect(data.product.height).to.be(0);
                      expect(data.product.dateTaken).to.be.a(Date);
                      expect(data.product.dateTaken).to.be(new Date());
                      expect(data.product.userFirstName).to.be.a('string');
                      expect(data.product.userFirstName).to.be("");
                      expect(data.product.userLastName).to.be.a('string');
                      expect(data.product.userLastName).to.be("");
                      expect(data.product.userDefaultArtistName).to.be.a('string');
                      expect(data.product.userDefaultArtistName).to.be("");
                      expect(data.product.artistName).to.be.a('string');
                      expect(data.product.artistName).to.be("");
                      expect(data.product.paper).to.be.a('string');
                      expect(data.product.paper).to.be("");
                      expect(data.product.printType).to.be.a('string');
                      expect(data.product.printType).to.be("");
                      expect(data.product.hasFramedOptions).to.be.a('boolean');
                      expect(data.product.hasFramedOptions).to.be(false);
                      {
                        let dataCtr = data.product.printOptions;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apicreativehubio.PrintOption);
                          expect(data.id).to.be.a('number');
                          expect(data.id).to.be(0);
                          expect(data.price).to.be.a('number');
                          expect(data.price).to.be();
                          expect(data.costPerItem).to.be.a('number');
                          expect(data.costPerItem).to.be();
                          expect(data.shortSideInches).to.be.a('number');
                          expect(data.shortSideInches).to.be();
                          expect(data.longSideInches).to.be.a('number');
                          expect(data.longSideInches).to.be();
                          expect(data.shortSideMM).to.be.a('number');
                          expect(data.shortSideMM).to.be();
                          expect(data.longSideMM).to.be.a('number');
                          expect(data.longSideMM).to.be();
                          expect(data.borderTopMM).to.be.a('number');
                          expect(data.borderTopMM).to.be();
                          expect(data.borderLeftMM).to.be.a('number');
                          expect(data.borderLeftMM).to.be();
                          expect(data.borderRightMM).to.be.a('number');
                          expect(data.borderRightMM).to.be();
                          expect(data.borderBottomMM).to.be.a('number');
                          expect(data.borderBottomMM).to.be();
                          expect(data.wMBorderTopMM).to.be.a('number');
                          expect(data.wMBorderTopMM).to.be();
                          expect(data.wMBorderLeftMM).to.be.a('number');
                          expect(data.wMBorderLeftMM).to.be();
                          expect(data.wMBorderRightMM).to.be.a('number');
                          expect(data.wMBorderRightMM).to.be();
                          expect(data.wMBorderBottomMM).to.be.a('number');
                          expect(data.wMBorderBottomMM).to.be();
                          expect(data.wMColour).to.be.a('string');
                          expect(data.wMColour).to.be("");
                          expect(data.isAvailable).to.be.a('boolean');
                          expect(data.isAvailable).to.be(false);
                          expect(data.sellAsEdition).to.be.a('boolean');
                          expect(data.sellAsEdition).to.be(false);
                          expect(data.editionsLimit).to.be.a('number');
                          expect(data.editionsLimit).to.be(0);
                          expect(data.lastUpdated).to.be.a(Date);
                          expect(data.lastUpdated).to.be(new Date());
                          expect(data.hasFrame).to.be.a('boolean');
                          expect(data.hasFrame).to.be(false);
                          expect(data.hasCanvas).to.be.a('boolean');
                          expect(data.hasCanvas).to.be(false);
                          expect(data.frameDescription).to.be.a('string');
                          expect(data.frameDescription).to.be("");
                          expect(data.frameWidthMM).to.be.a('number');
                          expect(data.frameWidthMM).to.be(0);
                          expect(data.widthMM).to.be.a('number');
                          expect(data.widthMM).to.be();
                          expect(data.heightMM).to.be.a('number');
                          expect(data.heightMM).to.be();
                          expect(data.editionsSold).to.be.a('number');
                          expect(data.editionsSold).to.be(0);
                          expect(data.currencyCode).to.be.a('string');
                          expect(data.currencyCode).to.be("");
                          expect(data.previewFileNameStandard).to.be.a('string');
                          expect(data.previewFileNameStandard).to.be("");
                          expect(data.previewFileNameCloseUp).to.be.a('string');
                          expect(data.previewFileNameCloseUp).to.be("");
                          expect(data.verticalBorderMM).to.be.a('number');
                          expect(data.verticalBorderMM).to.be();
                          expect(data.horizontalBorderMM).to.be.a('number');
                          expect(data.horizontalBorderMM).to.be();
                          expect(data.longBorderMM).to.be.a('number');
                          expect(data.longBorderMM).to.be();
                          expect(data.shortBorderMM).to.be.a('number');
                          expect(data.shortBorderMM).to.be();
                          expect(data.verticalWMBorderMM).to.be.a('number');
                          expect(data.verticalWMBorderMM).to.be();
                          expect(data.horizontalWMBorderMM).to.be.a('number');
                          expect(data.horizontalWMBorderMM).to.be();
                          expect(data.longMountMM).to.be.a('number');
                          expect(data.longMountMM).to.be();
                          expect(data.shortMountMM).to.be.a('number');
                          expect(data.shortMountMM).to.be();
                          expect(data.totalWidthMM).to.be.a('number');
                          expect(data.totalWidthMM).to.be();
                          expect(data.totalHeightMM).to.be.a('number');
                          expect(data.totalHeightMM).to.be();
                          expect(data.totalLongSideMM).to.be.a('number');
                          expect(data.totalLongSideMM).to.be();
                          expect(data.totalShortSideMM).to.be.a('number');
                          expect(data.totalShortSideMM).to.be();
                          expect(data.totalLongSideInches).to.be.a('number');
                          expect(data.totalLongSideInches).to.be();
                          expect(data.totalShortSideInches).to.be.a('number');
                          expect(data.totalShortSideInches).to.be();
                          expect(data.description).to.be.a('string');
                          expect(data.description).to.be("");
                          expect(data.shortDescription).to.be.a('string');
                          expect(data.shortDescription).to.be("");
                          expect(data.fullDescription).to.be.a('string');
                          expect(data.fullDescription).to.be("");
                          expect(data.variantDescription).to.be.a('string');
                          expect(data.variantDescription).to.be("");
                          expect(data.dimensions).to.be.a(Apicreativehubio.ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal);
                                expect(data.dimensions.item1).to.be.a('number');
                            expect(data.dimensions.item1).to.be();
                            expect(data.dimensions.item2).to.be.a('number');
                            expect(data.dimensions.item2).to.be();
                            expect(data.dimensions.item3).to.be.a('number');
                            expect(data.dimensions.item3).to.be();
                            expect(data.dimensions.item4).to.be.a('number');
                            expect(data.dimensions.item4).to.be();
          
                                }
                      }
                      expect(data.product.descriptionHTML).to.be.a('string');
                      expect(data.product.descriptionHTML).to.be("");
                      expect(data.product.dateTakenString).to.be.a('string');
                      expect(data.product.dateTakenString).to.be("");
                      expect(data.product.thumbnailUrl).to.be.a('string');
                      expect(data.product.thumbnailUrl).to.be("");
                    expect(data.printOption).to.be.a(Apicreativehubio.PrintOption);
                          expect(data.printOption.id).to.be.a('number');
                      expect(data.printOption.id).to.be(0);
                      expect(data.printOption.price).to.be.a('number');
                      expect(data.printOption.price).to.be();
                      expect(data.printOption.costPerItem).to.be.a('number');
                      expect(data.printOption.costPerItem).to.be();
                      expect(data.printOption.shortSideInches).to.be.a('number');
                      expect(data.printOption.shortSideInches).to.be();
                      expect(data.printOption.longSideInches).to.be.a('number');
                      expect(data.printOption.longSideInches).to.be();
                      expect(data.printOption.shortSideMM).to.be.a('number');
                      expect(data.printOption.shortSideMM).to.be();
                      expect(data.printOption.longSideMM).to.be.a('number');
                      expect(data.printOption.longSideMM).to.be();
                      expect(data.printOption.borderTopMM).to.be.a('number');
                      expect(data.printOption.borderTopMM).to.be();
                      expect(data.printOption.borderLeftMM).to.be.a('number');
                      expect(data.printOption.borderLeftMM).to.be();
                      expect(data.printOption.borderRightMM).to.be.a('number');
                      expect(data.printOption.borderRightMM).to.be();
                      expect(data.printOption.borderBottomMM).to.be.a('number');
                      expect(data.printOption.borderBottomMM).to.be();
                      expect(data.printOption.wMBorderTopMM).to.be.a('number');
                      expect(data.printOption.wMBorderTopMM).to.be();
                      expect(data.printOption.wMBorderLeftMM).to.be.a('number');
                      expect(data.printOption.wMBorderLeftMM).to.be();
                      expect(data.printOption.wMBorderRightMM).to.be.a('number');
                      expect(data.printOption.wMBorderRightMM).to.be();
                      expect(data.printOption.wMBorderBottomMM).to.be.a('number');
                      expect(data.printOption.wMBorderBottomMM).to.be();
                      expect(data.printOption.wMColour).to.be.a('string');
                      expect(data.printOption.wMColour).to.be("");
                      expect(data.printOption.isAvailable).to.be.a('boolean');
                      expect(data.printOption.isAvailable).to.be(false);
                      expect(data.printOption.sellAsEdition).to.be.a('boolean');
                      expect(data.printOption.sellAsEdition).to.be(false);
                      expect(data.printOption.editionsLimit).to.be.a('number');
                      expect(data.printOption.editionsLimit).to.be(0);
                      expect(data.printOption.lastUpdated).to.be.a(Date);
                      expect(data.printOption.lastUpdated).to.be(new Date());
                      expect(data.printOption.hasFrame).to.be.a('boolean');
                      expect(data.printOption.hasFrame).to.be(false);
                      expect(data.printOption.hasCanvas).to.be.a('boolean');
                      expect(data.printOption.hasCanvas).to.be(false);
                      expect(data.printOption.frameDescription).to.be.a('string');
                      expect(data.printOption.frameDescription).to.be("");
                      expect(data.printOption.frameWidthMM).to.be.a('number');
                      expect(data.printOption.frameWidthMM).to.be(0);
                      expect(data.printOption.widthMM).to.be.a('number');
                      expect(data.printOption.widthMM).to.be();
                      expect(data.printOption.heightMM).to.be.a('number');
                      expect(data.printOption.heightMM).to.be();
                      expect(data.printOption.editionsSold).to.be.a('number');
                      expect(data.printOption.editionsSold).to.be(0);
                      expect(data.printOption.currencyCode).to.be.a('string');
                      expect(data.printOption.currencyCode).to.be("");
                      expect(data.printOption.previewFileNameStandard).to.be.a('string');
                      expect(data.printOption.previewFileNameStandard).to.be("");
                      expect(data.printOption.previewFileNameCloseUp).to.be.a('string');
                      expect(data.printOption.previewFileNameCloseUp).to.be("");
                      expect(data.printOption.verticalBorderMM).to.be.a('number');
                      expect(data.printOption.verticalBorderMM).to.be();
                      expect(data.printOption.horizontalBorderMM).to.be.a('number');
                      expect(data.printOption.horizontalBorderMM).to.be();
                      expect(data.printOption.longBorderMM).to.be.a('number');
                      expect(data.printOption.longBorderMM).to.be();
                      expect(data.printOption.shortBorderMM).to.be.a('number');
                      expect(data.printOption.shortBorderMM).to.be();
                      expect(data.printOption.verticalWMBorderMM).to.be.a('number');
                      expect(data.printOption.verticalWMBorderMM).to.be();
                      expect(data.printOption.horizontalWMBorderMM).to.be.a('number');
                      expect(data.printOption.horizontalWMBorderMM).to.be();
                      expect(data.printOption.longMountMM).to.be.a('number');
                      expect(data.printOption.longMountMM).to.be();
                      expect(data.printOption.shortMountMM).to.be.a('number');
                      expect(data.printOption.shortMountMM).to.be();
                      expect(data.printOption.totalWidthMM).to.be.a('number');
                      expect(data.printOption.totalWidthMM).to.be();
                      expect(data.printOption.totalHeightMM).to.be.a('number');
                      expect(data.printOption.totalHeightMM).to.be();
                      expect(data.printOption.totalLongSideMM).to.be.a('number');
                      expect(data.printOption.totalLongSideMM).to.be();
                      expect(data.printOption.totalShortSideMM).to.be.a('number');
                      expect(data.printOption.totalShortSideMM).to.be();
                      expect(data.printOption.totalLongSideInches).to.be.a('number');
                      expect(data.printOption.totalLongSideInches).to.be();
                      expect(data.printOption.totalShortSideInches).to.be.a('number');
                      expect(data.printOption.totalShortSideInches).to.be();
                      expect(data.printOption.description).to.be.a('string');
                      expect(data.printOption.description).to.be("");
                      expect(data.printOption.shortDescription).to.be.a('string');
                      expect(data.printOption.shortDescription).to.be("");
                      expect(data.printOption.fullDescription).to.be.a('string');
                      expect(data.printOption.fullDescription).to.be("");
                      expect(data.printOption.variantDescription).to.be.a('string');
                      expect(data.printOption.variantDescription).to.be("");
                      expect(data.printOption.dimensions).to.be.a(Apicreativehubio.ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal);
                            expect(data.printOption.dimensions.item1).to.be.a('number');
                        expect(data.printOption.dimensions.item1).to.be();
                        expect(data.printOption.dimensions.item2).to.be.a('number');
                        expect(data.printOption.dimensions.item2).to.be();
                        expect(data.printOption.dimensions.item3).to.be.a('number');
                        expect(data.printOption.dimensions.item3).to.be();
                        expect(data.printOption.dimensions.item4).to.be.a('number');
                        expect(data.printOption.dimensions.item4).to.be();
    
                          }
                }
                expect(data.orderState).to.be.a(Apicreativehubio.OrderState);
                    expect(data.dateCreated).to.be.a(Date);
                expect(data.dateCreated).to.be(new Date());
                expect(data.dateLastEdited).to.be.a(Date);
                expect(data.dateLastEdited).to.be(new Date());
                expect(data.printCostExcludingSalesTax).to.be.a('number');
                expect(data.printCostExcludingSalesTax).to.be();
                expect(data.printCostSalesTax).to.be.a('number');
                expect(data.printCostSalesTax).to.be();
                expect(data.totalExcludingSalesTax).to.be.a('number');
                expect(data.totalExcludingSalesTax).to.be();
                expect(data.totalSalesTax).to.be.a('number');
                expect(data.totalSalesTax).to.be();
                expect(data.isPaid).to.be.a('boolean');
                expect(data.isPaid).to.be(false);
                expect(data.dateCreatedString).to.be.a('string');
                expect(data.dateCreatedString).to.be("");
                expect(data.dateLastEditedString).to.be.a('string');
                expect(data.dateLastEditedString).to.be("");
                expect(data.deliveryOption).to.be.a(Apicreativehubio.DeliveryOption);
                      expect(data.deliveryOption.id).to.be.a('number');
                  expect(data.deliveryOption.id).to.be(0);
                  expect(data.deliveryOption.branchId).to.be.a('number');
                  expect(data.deliveryOption.branchId).to.be(0);
                  expect(data.deliveryOption.branchName).to.be.a('string');
                  expect(data.deliveryOption.branchName).to.be("");
                  expect(data.deliveryOption.method).to.be.a('string');
                  expect(data.deliveryOption.method).to.be("");
                  expect(data.deliveryOption.deliveryTime).to.be.a('string');
                  expect(data.deliveryOption.deliveryTime).to.be("");
                  expect(data.deliveryOption.deliveryChargeExcludingSalesTax).to.be.a('number');
                  expect(data.deliveryOption.deliveryChargeExcludingSalesTax).to.be();
                  expect(data.deliveryOption.deliveryChargeSalesTax).to.be.a('number');
                  expect(data.deliveryOption.deliveryChargeSalesTax).to.be();
                  expect(data.deliveryOption.estimatedDeliveryDateFrom).to.be.a(Date);
                  expect(data.deliveryOption.estimatedDeliveryDateFrom).to.be(new Date());
                  expect(data.deliveryOption.estimatedDeliveryDateTo).to.be.a(Date);
                  expect(data.deliveryOption.estimatedDeliveryDateTo).to.be(new Date());
                expect(data.deliveryChargeExcludingSalesTax).to.be.a('number');
                expect(data.deliveryChargeExcludingSalesTax).to.be();
                expect(data.deliveryChargeSalesTax).to.be.a('number');
                expect(data.deliveryChargeSalesTax).to.be();
                expect(data.dateDispatched).to.be.a(Date);
                expect(data.dateDispatched).to.be(new Date());
                expect(data.trackingNumber).to.be.a('string');
                expect(data.trackingNumber).to.be("");
                expect(data.dateDispatchedString).to.be.a('string');
                expect(data.dateDispatchedString).to.be("");

                      }
            }
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ordersUpdateStateV1', function() {
        it('should call ordersUpdateStateV1 successfully', function(done) {
          // TODO: uncomment, update parameter values for ordersUpdateStateV1 call
          /*
          var opts = {};
          opts.model = new Apicreativehubio.OrderStateRequest();
          opts.model.orderId = 0;
          opts.model.orderState = new Apicreativehubio.OrderState();

          instance.ordersUpdateStateV1(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
