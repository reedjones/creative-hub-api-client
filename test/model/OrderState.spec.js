/*
 * api.creativehub.io
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.33
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Apicreativehubio);
  }
}(this, function(expect, Apicreativehubio) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderState', function() {
      beforeEach(function() {
        instance = Apicreativehubio.OrderState;
      });

      it('should create an instance of OrderState', function() {
        // TODO: update the code to test OrderState
        expect(instance).to.be.a('object');
      });

      it('should have the property processingPayment', function() {
        expect(instance).to.have.property('processingPayment');
        expect(instance.processingPayment).to.be("ProcessingPayment");
      });

      it('should have the property newOrder', function() {
        expect(instance).to.have.property('newOrder');
        expect(instance.newOrder).to.be("NewOrder");
      });

      it('should have the property imageFileReceived', function() {
        expect(instance).to.have.property('imageFileReceived');
        expect(instance.imageFileReceived).to.be("ImageFileReceived");
      });

      it('should have the property printed', function() {
        expect(instance).to.have.property('printed');
        expect(instance.printed).to.be("Printed");
      });

      it('should have the property inFraming', function() {
        expect(instance).to.have.property('inFraming');
        expect(instance.inFraming).to.be("InFraming");
      });

      it('should have the property inMounting', function() {
        expect(instance).to.have.property('inMounting');
        expect(instance.inMounting).to.be("InMounting");
      });

      it('should have the property toBeRedone', function() {
        expect(instance).to.have.property('toBeRedone');
        expect(instance.toBeRedone).to.be("ToBeRedone");
      });

      it('should have the property mountingStarted', function() {
        expect(instance).to.have.property('mountingStarted');
        expect(instance.mountingStarted).to.be("MountingStarted");
      });

      it('should have the property framingComplete', function() {
        expect(instance).to.have.property('framingComplete');
        expect(instance.framingComplete).to.be("FramingComplete");
      });

      it('should have the property framingStarted', function() {
        expect(instance).to.have.property('framingStarted');
        expect(instance.framingStarted).to.be("FramingStarted");
      });

      it('should have the property mountingComplete', function() {
        expect(instance).to.have.property('mountingComplete');
        expect(instance.mountingComplete).to.be("MountingComplete");
      });

      it('should have the property dispatched', function() {
        expect(instance).to.have.property('dispatched');
        expect(instance.dispatched).to.be("Dispatched");
      });

      it('should have the property readyForCollection', function() {
        expect(instance).to.have.property('readyForCollection');
        expect(instance.readyForCollection).to.be("ReadyForCollection");
      });

      it('should have the property collected', function() {
        expect(instance).to.have.property('collected');
        expect(instance.collected).to.be("Collected");
      });

      it('should have the property cancelled', function() {
        expect(instance).to.have.property('cancelled');
        expect(instance.cancelled).to.be("Cancelled");
      });

      it('should have the property forReturn', function() {
        expect(instance).to.have.property('forReturn');
        expect(instance.forReturn).to.be("ForReturn");
      });

      it('should have the property returnReceived', function() {
        expect(instance).to.have.property('returnReceived');
        expect(instance.returnReceived).to.be("ReturnReceived");
      });

      it('should have the property refundInitiated', function() {
        expect(instance).to.have.property('refundInitiated');
        expect(instance.refundInitiated).to.be("RefundInitiated");
      });

      it('should have the property paymentFailed', function() {
        expect(instance).to.have.property('paymentFailed');
        expect(instance.paymentFailed).to.be("PaymentFailed");
      });

      it('should have the property packed', function() {
        expect(instance).to.have.property('packed');
        expect(instance.packed).to.be("Packed");
      });

      it('should have the property delivered', function() {
        expect(instance).to.have.property('delivered');
        expect(instance.delivered).to.be("Delivered");
      });

      it('should have the property shippingFailed', function() {
        expect(instance).to.have.property('shippingFailed');
        expect(instance.shippingFailed).to.be("ShippingFailed");
      });

      it('should have the property onHold', function() {
        expect(instance).to.have.property('onHold');
        expect(instance.onHold).to.be("OnHold");
      });

      it('should have the property dispatch', function() {
        expect(instance).to.have.property('dispatch');
        expect(instance.dispatch).to.be("Dispatch");
      });

      it('should have the property aSFFraming', function() {
        expect(instance).to.have.property('aSFFraming');
        expect(instance.aSFFraming).to.be("ASFFraming");
      });

      it('should have the property dispatchQC', function() {
        expect(instance).to.have.property('dispatchQC');
        expect(instance.dispatchQC).to.be("DispatchQC");
      });

      it('should have the property cardRequired', function() {
        expect(instance).to.have.property('cardRequired');
        expect(instance.cardRequired).to.be("CardRequired");
      });

      it('should have the property orderFailed', function() {
        expect(instance).to.have.property('orderFailed');
        expect(instance.orderFailed).to.be("OrderFailed");
      });

      it('should have the property duplicateOrder', function() {
        expect(instance).to.have.property('duplicateOrder');
        expect(instance.duplicateOrder).to.be("DuplicateOrder");
      });

      it('should have the property embryonicOrder', function() {
        expect(instance).to.have.property('embryonicOrder');
        expect(instance.embryonicOrder).to.be("EmbryonicOrder");
      });

      it('should have the property suspendedOrder', function() {
        expect(instance).to.have.property('suspendedOrder');
        expect(instance.suspendedOrder).to.be("SuspendedOrder");
      });

      it('should have the property notSet', function() {
        expect(instance).to.have.property('notSet');
        expect(instance.notSet).to.be("NotSet");
      });

    });
  });

}));
