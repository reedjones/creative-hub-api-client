/*
 * api.creativehub.io
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.33
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Apicreativehubio);
  }
}(this, function(expect, Apicreativehubio) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Product', function() {
      beforeEach(function() {
        instance = new Apicreativehubio.Product();
      });

      it('should create an instance of Product', function() {
        // TODO: update the code to test Product
        expect(instance).to.be.a(Apicreativehubio.Product);
      });

      it('should have the property id (base name: "Id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property fileName (base name: "FileName")', function() {
        // TODO: update the code to test the property fileName
        expect(instance).to.have.property('fileName');
        // expect(instance.fileName).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "DisplayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "Description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property storagePrefix (base name: "StoragePrefix")', function() {
        // TODO: update the code to test the property storagePrefix
        expect(instance).to.have.property('storagePrefix');
        // expect(instance.storagePrefix).to.be(expectedValueLiteral);
      });

      it('should have the property GUID (base name: "GUID")', function() {
        // TODO: update the code to test the property GUID
        expect(instance).to.have.property('GUID');
        // expect(instance.GUID).to.be(expectedValueLiteral);
      });

      it('should have the property HDPI (base name: "HDPI")', function() {
        // TODO: update the code to test the property HDPI
        expect(instance).to.have.property('HDPI');
        // expect(instance.HDPI).to.be(expectedValueLiteral);
      });

      it('should have the property VDPI (base name: "VDPI")', function() {
        // TODO: update the code to test the property VDPI
        expect(instance).to.have.property('VDPI');
        // expect(instance.VDPI).to.be(expectedValueLiteral);
      });

      it('should have the property width (base name: "Width")', function() {
        // TODO: update the code to test the property width
        expect(instance).to.have.property('width');
        // expect(instance.width).to.be(expectedValueLiteral);
      });

      it('should have the property height (base name: "Height")', function() {
        // TODO: update the code to test the property height
        expect(instance).to.have.property('height');
        // expect(instance.height).to.be(expectedValueLiteral);
      });

      it('should have the property dateTaken (base name: "DateTaken")', function() {
        // TODO: update the code to test the property dateTaken
        expect(instance).to.have.property('dateTaken');
        // expect(instance.dateTaken).to.be(expectedValueLiteral);
      });

      it('should have the property userFirstName (base name: "UserFirstName")', function() {
        // TODO: update the code to test the property userFirstName
        expect(instance).to.have.property('userFirstName');
        // expect(instance.userFirstName).to.be(expectedValueLiteral);
      });

      it('should have the property userLastName (base name: "UserLastName")', function() {
        // TODO: update the code to test the property userLastName
        expect(instance).to.have.property('userLastName');
        // expect(instance.userLastName).to.be(expectedValueLiteral);
      });

      it('should have the property userDefaultArtistName (base name: "UserDefaultArtistName")', function() {
        // TODO: update the code to test the property userDefaultArtistName
        expect(instance).to.have.property('userDefaultArtistName');
        // expect(instance.userDefaultArtistName).to.be(expectedValueLiteral);
      });

      it('should have the property artistName (base name: "ArtistName")', function() {
        // TODO: update the code to test the property artistName
        expect(instance).to.have.property('artistName');
        // expect(instance.artistName).to.be(expectedValueLiteral);
      });

      it('should have the property paper (base name: "Paper")', function() {
        // TODO: update the code to test the property paper
        expect(instance).to.have.property('paper');
        // expect(instance.paper).to.be(expectedValueLiteral);
      });

      it('should have the property printType (base name: "PrintType")', function() {
        // TODO: update the code to test the property printType
        expect(instance).to.have.property('printType');
        // expect(instance.printType).to.be(expectedValueLiteral);
      });

      it('should have the property hasFramedOptions (base name: "HasFramedOptions")', function() {
        // TODO: update the code to test the property hasFramedOptions
        expect(instance).to.have.property('hasFramedOptions');
        // expect(instance.hasFramedOptions).to.be(expectedValueLiteral);
      });

      it('should have the property printOptions (base name: "PrintOptions")', function() {
        // TODO: update the code to test the property printOptions
        expect(instance).to.have.property('printOptions');
        // expect(instance.printOptions).to.be(expectedValueLiteral);
      });

      it('should have the property descriptionHTML (base name: "DescriptionHTML")', function() {
        // TODO: update the code to test the property descriptionHTML
        expect(instance).to.have.property('descriptionHTML');
        // expect(instance.descriptionHTML).to.be(expectedValueLiteral);
      });

      it('should have the property dateTakenString (base name: "DateTakenString")', function() {
        // TODO: update the code to test the property dateTakenString
        expect(instance).to.have.property('dateTakenString');
        // expect(instance.dateTakenString).to.be(expectedValueLiteral);
      });

      it('should have the property thumbnailUrl (base name: "ThumbnailUrl")', function() {
        // TODO: update the code to test the property thumbnailUrl
        expect(instance).to.have.property('thumbnailUrl');
        // expect(instance.thumbnailUrl).to.be(expectedValueLiteral);
      });

    });
  });

}));
