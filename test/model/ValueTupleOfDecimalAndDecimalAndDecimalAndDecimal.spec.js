/*
 * api.creativehub.io
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.33
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Apicreativehubio);
  }
}(this, function(expect, Apicreativehubio) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal', function() {
      beforeEach(function() {
        instance = new Apicreativehubio.ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal();
      });

      it('should create an instance of ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal', function() {
        // TODO: update the code to test ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal
        expect(instance).to.be.a(Apicreativehubio.ValueTupleOfDecimalAndDecimalAndDecimalAndDecimal);
      });

      it('should have the property item1 (base name: "Item1")', function() {
        // TODO: update the code to test the property item1
        expect(instance).to.have.property('item1');
        // expect(instance.item1).to.be(expectedValueLiteral);
      });

      it('should have the property item2 (base name: "Item2")', function() {
        // TODO: update the code to test the property item2
        expect(instance).to.have.property('item2');
        // expect(instance.item2).to.be(expectedValueLiteral);
      });

      it('should have the property item3 (base name: "Item3")', function() {
        // TODO: update the code to test the property item3
        expect(instance).to.have.property('item3');
        // expect(instance.item3).to.be(expectedValueLiteral);
      });

      it('should have the property item4 (base name: "Item4")', function() {
        // TODO: update the code to test the property item4
        expect(instance).to.have.property('item4');
        // expect(instance.item4).to.be(expectedValueLiteral);
      });

    });
  });

}));
