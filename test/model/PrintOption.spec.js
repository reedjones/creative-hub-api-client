/*
 * api.creativehub.io
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.33
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Apicreativehubio);
  }
}(this, function(expect, Apicreativehubio) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PrintOption', function() {
      beforeEach(function() {
        instance = new Apicreativehubio.PrintOption();
      });

      it('should create an instance of PrintOption', function() {
        // TODO: update the code to test PrintOption
        expect(instance).to.be.a(Apicreativehubio.PrintOption);
      });

      it('should have the property id (base name: "Id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property price (base name: "Price")', function() {
        // TODO: update the code to test the property price
        expect(instance).to.have.property('price');
        // expect(instance.price).to.be(expectedValueLiteral);
      });

      it('should have the property costPerItem (base name: "CostPerItem")', function() {
        // TODO: update the code to test the property costPerItem
        expect(instance).to.have.property('costPerItem');
        // expect(instance.costPerItem).to.be(expectedValueLiteral);
      });

      it('should have the property shortSideInches (base name: "ShortSideInches")', function() {
        // TODO: update the code to test the property shortSideInches
        expect(instance).to.have.property('shortSideInches');
        // expect(instance.shortSideInches).to.be(expectedValueLiteral);
      });

      it('should have the property longSideInches (base name: "LongSideInches")', function() {
        // TODO: update the code to test the property longSideInches
        expect(instance).to.have.property('longSideInches');
        // expect(instance.longSideInches).to.be(expectedValueLiteral);
      });

      it('should have the property shortSideMM (base name: "ShortSideMM")', function() {
        // TODO: update the code to test the property shortSideMM
        expect(instance).to.have.property('shortSideMM');
        // expect(instance.shortSideMM).to.be(expectedValueLiteral);
      });

      it('should have the property longSideMM (base name: "LongSideMM")', function() {
        // TODO: update the code to test the property longSideMM
        expect(instance).to.have.property('longSideMM');
        // expect(instance.longSideMM).to.be(expectedValueLiteral);
      });

      it('should have the property borderTopMM (base name: "BorderTopMM")', function() {
        // TODO: update the code to test the property borderTopMM
        expect(instance).to.have.property('borderTopMM');
        // expect(instance.borderTopMM).to.be(expectedValueLiteral);
      });

      it('should have the property borderLeftMM (base name: "BorderLeftMM")', function() {
        // TODO: update the code to test the property borderLeftMM
        expect(instance).to.have.property('borderLeftMM');
        // expect(instance.borderLeftMM).to.be(expectedValueLiteral);
      });

      it('should have the property borderRightMM (base name: "BorderRightMM")', function() {
        // TODO: update the code to test the property borderRightMM
        expect(instance).to.have.property('borderRightMM');
        // expect(instance.borderRightMM).to.be(expectedValueLiteral);
      });

      it('should have the property borderBottomMM (base name: "BorderBottomMM")', function() {
        // TODO: update the code to test the property borderBottomMM
        expect(instance).to.have.property('borderBottomMM');
        // expect(instance.borderBottomMM).to.be(expectedValueLiteral);
      });

      it('should have the property wMBorderTopMM (base name: "WMBorderTopMM")', function() {
        // TODO: update the code to test the property wMBorderTopMM
        expect(instance).to.have.property('wMBorderTopMM');
        // expect(instance.wMBorderTopMM).to.be(expectedValueLiteral);
      });

      it('should have the property wMBorderLeftMM (base name: "WMBorderLeftMM")', function() {
        // TODO: update the code to test the property wMBorderLeftMM
        expect(instance).to.have.property('wMBorderLeftMM');
        // expect(instance.wMBorderLeftMM).to.be(expectedValueLiteral);
      });

      it('should have the property wMBorderRightMM (base name: "WMBorderRightMM")', function() {
        // TODO: update the code to test the property wMBorderRightMM
        expect(instance).to.have.property('wMBorderRightMM');
        // expect(instance.wMBorderRightMM).to.be(expectedValueLiteral);
      });

      it('should have the property wMBorderBottomMM (base name: "WMBorderBottomMM")', function() {
        // TODO: update the code to test the property wMBorderBottomMM
        expect(instance).to.have.property('wMBorderBottomMM');
        // expect(instance.wMBorderBottomMM).to.be(expectedValueLiteral);
      });

      it('should have the property wMColour (base name: "WMColour")', function() {
        // TODO: update the code to test the property wMColour
        expect(instance).to.have.property('wMColour');
        // expect(instance.wMColour).to.be(expectedValueLiteral);
      });

      it('should have the property isAvailable (base name: "IsAvailable")', function() {
        // TODO: update the code to test the property isAvailable
        expect(instance).to.have.property('isAvailable');
        // expect(instance.isAvailable).to.be(expectedValueLiteral);
      });

      it('should have the property sellAsEdition (base name: "SellAsEdition")', function() {
        // TODO: update the code to test the property sellAsEdition
        expect(instance).to.have.property('sellAsEdition');
        // expect(instance.sellAsEdition).to.be(expectedValueLiteral);
      });

      it('should have the property editionsLimit (base name: "EditionsLimit")', function() {
        // TODO: update the code to test the property editionsLimit
        expect(instance).to.have.property('editionsLimit');
        // expect(instance.editionsLimit).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdated (base name: "LastUpdated")', function() {
        // TODO: update the code to test the property lastUpdated
        expect(instance).to.have.property('lastUpdated');
        // expect(instance.lastUpdated).to.be(expectedValueLiteral);
      });

      it('should have the property hasFrame (base name: "HasFrame")', function() {
        // TODO: update the code to test the property hasFrame
        expect(instance).to.have.property('hasFrame');
        // expect(instance.hasFrame).to.be(expectedValueLiteral);
      });

      it('should have the property hasCanvas (base name: "HasCanvas")', function() {
        // TODO: update the code to test the property hasCanvas
        expect(instance).to.have.property('hasCanvas');
        // expect(instance.hasCanvas).to.be(expectedValueLiteral);
      });

      it('should have the property frameDescription (base name: "FrameDescription")', function() {
        // TODO: update the code to test the property frameDescription
        expect(instance).to.have.property('frameDescription');
        // expect(instance.frameDescription).to.be(expectedValueLiteral);
      });

      it('should have the property frameWidthMM (base name: "FrameWidthMM")', function() {
        // TODO: update the code to test the property frameWidthMM
        expect(instance).to.have.property('frameWidthMM');
        // expect(instance.frameWidthMM).to.be(expectedValueLiteral);
      });

      it('should have the property widthMM (base name: "WidthMM")', function() {
        // TODO: update the code to test the property widthMM
        expect(instance).to.have.property('widthMM');
        // expect(instance.widthMM).to.be(expectedValueLiteral);
      });

      it('should have the property heightMM (base name: "HeightMM")', function() {
        // TODO: update the code to test the property heightMM
        expect(instance).to.have.property('heightMM');
        // expect(instance.heightMM).to.be(expectedValueLiteral);
      });

      it('should have the property editionsSold (base name: "EditionsSold")', function() {
        // TODO: update the code to test the property editionsSold
        expect(instance).to.have.property('editionsSold');
        // expect(instance.editionsSold).to.be(expectedValueLiteral);
      });

      it('should have the property currencyCode (base name: "CurrencyCode")', function() {
        // TODO: update the code to test the property currencyCode
        expect(instance).to.have.property('currencyCode');
        // expect(instance.currencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property previewFileNameStandard (base name: "PreviewFileNameStandard")', function() {
        // TODO: update the code to test the property previewFileNameStandard
        expect(instance).to.have.property('previewFileNameStandard');
        // expect(instance.previewFileNameStandard).to.be(expectedValueLiteral);
      });

      it('should have the property previewFileNameCloseUp (base name: "PreviewFileNameCloseUp")', function() {
        // TODO: update the code to test the property previewFileNameCloseUp
        expect(instance).to.have.property('previewFileNameCloseUp');
        // expect(instance.previewFileNameCloseUp).to.be(expectedValueLiteral);
      });

      it('should have the property verticalBorderMM (base name: "VerticalBorderMM")', function() {
        // TODO: update the code to test the property verticalBorderMM
        expect(instance).to.have.property('verticalBorderMM');
        // expect(instance.verticalBorderMM).to.be(expectedValueLiteral);
      });

      it('should have the property horizontalBorderMM (base name: "HorizontalBorderMM")', function() {
        // TODO: update the code to test the property horizontalBorderMM
        expect(instance).to.have.property('horizontalBorderMM');
        // expect(instance.horizontalBorderMM).to.be(expectedValueLiteral);
      });

      it('should have the property longBorderMM (base name: "LongBorderMM")', function() {
        // TODO: update the code to test the property longBorderMM
        expect(instance).to.have.property('longBorderMM');
        // expect(instance.longBorderMM).to.be(expectedValueLiteral);
      });

      it('should have the property shortBorderMM (base name: "ShortBorderMM")', function() {
        // TODO: update the code to test the property shortBorderMM
        expect(instance).to.have.property('shortBorderMM');
        // expect(instance.shortBorderMM).to.be(expectedValueLiteral);
      });

      it('should have the property verticalWMBorderMM (base name: "VerticalWMBorderMM")', function() {
        // TODO: update the code to test the property verticalWMBorderMM
        expect(instance).to.have.property('verticalWMBorderMM');
        // expect(instance.verticalWMBorderMM).to.be(expectedValueLiteral);
      });

      it('should have the property horizontalWMBorderMM (base name: "HorizontalWMBorderMM")', function() {
        // TODO: update the code to test the property horizontalWMBorderMM
        expect(instance).to.have.property('horizontalWMBorderMM');
        // expect(instance.horizontalWMBorderMM).to.be(expectedValueLiteral);
      });

      it('should have the property longMountMM (base name: "LongMountMM")', function() {
        // TODO: update the code to test the property longMountMM
        expect(instance).to.have.property('longMountMM');
        // expect(instance.longMountMM).to.be(expectedValueLiteral);
      });

      it('should have the property shortMountMM (base name: "ShortMountMM")', function() {
        // TODO: update the code to test the property shortMountMM
        expect(instance).to.have.property('shortMountMM');
        // expect(instance.shortMountMM).to.be(expectedValueLiteral);
      });

      it('should have the property totalWidthMM (base name: "TotalWidthMM")', function() {
        // TODO: update the code to test the property totalWidthMM
        expect(instance).to.have.property('totalWidthMM');
        // expect(instance.totalWidthMM).to.be(expectedValueLiteral);
      });

      it('should have the property totalHeightMM (base name: "TotalHeightMM")', function() {
        // TODO: update the code to test the property totalHeightMM
        expect(instance).to.have.property('totalHeightMM');
        // expect(instance.totalHeightMM).to.be(expectedValueLiteral);
      });

      it('should have the property totalLongSideMM (base name: "TotalLongSideMM")', function() {
        // TODO: update the code to test the property totalLongSideMM
        expect(instance).to.have.property('totalLongSideMM');
        // expect(instance.totalLongSideMM).to.be(expectedValueLiteral);
      });

      it('should have the property totalShortSideMM (base name: "TotalShortSideMM")', function() {
        // TODO: update the code to test the property totalShortSideMM
        expect(instance).to.have.property('totalShortSideMM');
        // expect(instance.totalShortSideMM).to.be(expectedValueLiteral);
      });

      it('should have the property totalLongSideInches (base name: "TotalLongSideInches")', function() {
        // TODO: update the code to test the property totalLongSideInches
        expect(instance).to.have.property('totalLongSideInches');
        // expect(instance.totalLongSideInches).to.be(expectedValueLiteral);
      });

      it('should have the property totalShortSideInches (base name: "TotalShortSideInches")', function() {
        // TODO: update the code to test the property totalShortSideInches
        expect(instance).to.have.property('totalShortSideInches');
        // expect(instance.totalShortSideInches).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "Description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property shortDescription (base name: "ShortDescription")', function() {
        // TODO: update the code to test the property shortDescription
        expect(instance).to.have.property('shortDescription');
        // expect(instance.shortDescription).to.be(expectedValueLiteral);
      });

      it('should have the property fullDescription (base name: "FullDescription")', function() {
        // TODO: update the code to test the property fullDescription
        expect(instance).to.have.property('fullDescription');
        // expect(instance.fullDescription).to.be(expectedValueLiteral);
      });

      it('should have the property variantDescription (base name: "VariantDescription")', function() {
        // TODO: update the code to test the property variantDescription
        expect(instance).to.have.property('variantDescription');
        // expect(instance.variantDescription).to.be(expectedValueLiteral);
      });

      it('should have the property dimensions (base name: "Dimensions")', function() {
        // TODO: update the code to test the property dimensions
        expect(instance).to.have.property('dimensions');
        // expect(instance.dimensions).to.be(expectedValueLiteral);
      });

    });
  });

}));
